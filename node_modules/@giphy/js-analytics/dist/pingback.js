"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var js_util_1 = require("@giphy/js-util");
var throttle_debounce_1 = require("throttle-debounce");
var global_1 = __importDefault(require("./global"));
var send_pingback_1 = require("./send-pingback");
var queuedPingbackEvents = [];
global_1.default.giphyRandomId = js_util_1.getPingbackId();
var loggedInUserId = '';
function sendPingbacks() {
    var sendEvents = __spreadArrays(queuedPingbackEvents);
    queuedPingbackEvents = [];
    send_pingback_1.sendPingback(sendEvents);
}
var debouncedPingbackEvent = throttle_debounce_1.debounce(1000, sendPingbacks);
(_a = global_1.default.addEventListener) === null || _a === void 0 ? void 0 : _a.call(global_1.default, 'beforeunload', sendPingbacks);
var pingback = function (_a) {
    var userId = _a.userId, eventType = _a.eventType, actionType = _a.actionType, attributes = _a.attributes, _b = _a.queueEvents, queueEvents = _b === void 0 ? true : _b, analyticsResponsePayload = _a.analyticsResponsePayload;
    // save the user id for whenever create session is invoked
    loggedInUserId = userId ? String(userId) : loggedInUserId;
    var newEvent = {
        ts: Date.now(),
        attributes: attributes,
        action_type: actionType,
        user_id: js_util_1.getPingbackId(),
        analytics_response_payload: analyticsResponsePayload,
    };
    if (loggedInUserId) {
        newEvent.logged_in_user_id = loggedInUserId;
    }
    // add verification mode
    if (newEvent.analytics_response_payload) {
        newEvent.analytics_response_payload = "" + newEvent.analytics_response_payload + (js_util_1.Logger.ENABLED ? '&mode=verification' : '');
    }
    if (eventType) {
        newEvent.event_type = eventType;
    }
    queuedPingbackEvents.push(newEvent);
    queueEvents ? debouncedPingbackEvent() : sendPingbacks();
};
exports.default = pingback;
//# sourceMappingURL=pingback.js.map