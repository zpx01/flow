{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _createForOfIteratorHelper = require(\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\n\nvar Enums_1 = require(\"./Enums\");\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n\nvar OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\n\nfunction drawPolygonMask(context, rawData, stroke) {\n  var color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n\n  if (!color) {\n    return;\n  }\n\n  context.beginPath();\n  context.moveTo(rawData[0].x, rawData[0].y);\n\n  var _iterator = _createForOfIteratorHelper(rawData),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      context.lineTo(item.x, item.y);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  context.closePath();\n  context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n  context.lineWidth = stroke.width;\n  context.stroke();\n}\n\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n  context.translate(position.x, position.y);\n  var color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n\n  if (!color) {\n    return;\n  }\n\n  context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n  context.lineWidth = stroke.width;\n  context.stroke(path);\n}\n\nfunction parsePaths(paths, scale, offset) {\n  var res = [];\n\n  var _iterator2 = _createForOfIteratorHelper(paths),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var path = _step2.value;\n      var segments = path.element.pathSegList;\n      var len = segments.numberOfItems;\n      var p = {\n        x: 0,\n        y: 0\n      };\n\n      for (var i = 0; i < len; i++) {\n        var segment = segments.getItem(i);\n        var svgPathSeg = window.SVGPathSeg;\n\n        switch (segment.pathSegType) {\n          case svgPathSeg.PATHSEG_MOVETO_ABS:\n          case svgPathSeg.PATHSEG_LINETO_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n          case svgPathSeg.PATHSEG_ARC_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n            {\n              var absSeg = segment;\n              p.x = absSeg.x;\n              p.y = absSeg.y;\n              break;\n            }\n\n          case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n            p.x = segment.x;\n            break;\n\n          case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n            p.y = segment.y;\n            break;\n\n          case svgPathSeg.PATHSEG_LINETO_REL:\n          case svgPathSeg.PATHSEG_MOVETO_REL:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n          case svgPathSeg.PATHSEG_ARC_REL:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n            {\n              var relSeg = segment;\n              p.x += relSeg.x;\n              p.y += relSeg.y;\n              break;\n            }\n\n          case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n            p.x += segment.x;\n            break;\n\n          case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n            p.y += segment.y;\n            break;\n\n          case svgPathSeg.PATHSEG_UNKNOWN:\n          case svgPathSeg.PATHSEG_CLOSEPATH:\n            continue;\n        }\n\n        res.push({\n          x: p.x * scale + offset.x,\n          y: p.y * scale + offset.y\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return res;\n}\n\nfunction calcClosestPtOnSegment(s1, s2, pos) {\n  var _Utils_1$NumberUtils$ = Utils_1.NumberUtils.getDistances(pos, s1),\n      dx = _Utils_1$NumberUtils$.dx,\n      dy = _Utils_1$NumberUtils$.dy;\n\n  var _Utils_1$NumberUtils$2 = Utils_1.NumberUtils.getDistances(s2, s1),\n      dxx = _Utils_1$NumberUtils$2.dx,\n      dyy = _Utils_1$NumberUtils$2.dy;\n\n  var t = (dx * dxx + dy * dyy) / (Math.pow(dxx, 2) + Math.pow(dyy, 2));\n  var x = s1.x + dxx * t;\n  var y = s1.y + dyy * t;\n\n  if (t < 0) {\n    x = s1.x;\n    y = s1.y;\n  } else if (t > 1) {\n    x = s2.x;\n    y = s2.y;\n  }\n\n  return {\n    x: x,\n    y: y,\n    isOnSegment: t >= 0 && t <= 1\n  };\n}\n\nfunction segmentBounce(start, stop, velocity) {\n  var _Utils_1$NumberUtils$3 = Utils_1.NumberUtils.getDistances(start, stop),\n      dx = _Utils_1$NumberUtils$3.dx,\n      dy = _Utils_1$NumberUtils$3.dy;\n\n  var wallAngle = Math.atan2(dy, dx);\n  var wallNormalX = Math.sin(wallAngle);\n  var wallNormalY = -Math.cos(wallAngle);\n  var d = 2 * (velocity.x * wallNormalX + velocity.y * wallNormalY);\n  velocity.x -= d * wallNormalX;\n  velocity.y -= d * wallNormalY;\n}\n\nvar PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container) {\n    _classCallCheck(this, PolygonMaskInstance);\n\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  _createClass(PolygonMaskInstance, [{\n    key: \"initAsync\",\n    value: function initAsync(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var polygonMaskOptions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                polygonMaskOptions = this.options;\n                this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n\n                if (!polygonMaskOptions.enable) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.initRawData();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n\n      var container = this.container;\n      var options = this.options;\n\n      if (!(options.enable && options.type !== Enums_1.Type.none)) {\n        return;\n      }\n\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n\n      this.redrawTimeout = window.setTimeout(function () {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return this.initRawData(true);\n\n                case 2:\n                  container.particles.redraw();\n\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      }, 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n\n      if (options.enable && options.type === Enums_1.Type.inline && (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint || options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n        this.drawPoints();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n\n      return Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var options = this.options;\n      var polygonDraw = options.draw;\n\n      if (!(options.enable && polygonDraw.enable)) {\n        return;\n      }\n\n      var rawData = this.raw;\n\n      var _iterator3 = _createForOfIteratorHelper(this.paths),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var path = _step3.value;\n          var path2d = path.path2d;\n          var path2dSupported = this.path2DSupported;\n\n          if (!context) {\n            continue;\n          }\n\n          if (path2dSupported && path2d && this.offset) {\n            drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, delta, direction) {\n      var options = this.options;\n\n      if (!this.raw || !options.enable || direction !== OutModeDirection_1.OutModeDirection.top) {\n        return false;\n      }\n\n      if (options.type === Enums_1.Type.inside || options.type === Enums_1.Type.outside) {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n            radius = particle.getRadius();\n\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n              pj = this.raw[j];\n          closest = calcClosestPtOnSegment(pi, pj, pos);\n          var dist = Utils_1.NumberUtils.getDistances(pos, closest);\n          var _ref = [dist.dx, dist.dy];\n          dx = _ref[0];\n          dy = _ref[1];\n\n          if (dist.distance < radius) {\n            segmentBounce(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === Enums_1.Type.inline && particle.initialPosition) {\n        var _dist = Utils_1.NumberUtils.getDistance(particle.initialPosition, particle.getPosition());\n\n        if (_dist > this.polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n\n      var container = this.container;\n      var options = this.options;\n\n      if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n        return true;\n      }\n\n      if (!this.raw) {\n        throw new Error(Utils_1.Constants.noPolygonFound);\n      }\n\n      var canvasSize = container.canvas.size;\n      var x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n      var y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      var inside = false;\n\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i];\n        var pj = this.raw[j];\n        var intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n\n      return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n\n      var container = this.container;\n      var options = this.options;\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(xml, \"image/svg+xml\");\n      var svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n\n      this.paths = [];\n\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n\n      var pxRatio = container.retina.pixelRatio;\n      var scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return parsePaths(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function downloadSvgPath(svgUrl, force) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = this.options;\n                url = svgUrl || options.url;\n                forceDownload = force !== null && force !== void 0 ? force : false;\n\n                if (!(!url || this.paths !== undefined && !forceDownload)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.raw);\n\n              case 5:\n                _context3.next = 7;\n                return fetch(url);\n\n              case 7:\n                req = _context3.sent;\n\n                if (req.ok) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n\n              case 10:\n                _context3.t0 = this;\n                _context3.next = 13;\n                return req.text();\n\n              case 13:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = force;\n                return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(this.raw),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var item = _step4.value;\n          this.container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this.container;\n      var options = this.options;\n      var position;\n\n      if (options.type === Enums_1.Type.inline) {\n        switch (options.inline.arrangement) {\n          case Enums_1.InlineArrangement.randomPoint:\n            position = this.getRandomPoint();\n            break;\n\n          case Enums_1.InlineArrangement.randomLength:\n            position = this.getRandomPointByLength();\n            break;\n\n          case Enums_1.InlineArrangement.equidistant:\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n\n          case Enums_1.InlineArrangement.onePerPoint:\n          case Enums_1.InlineArrangement.perPoint:\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n\n      var coords = Utils_1.Utils.itemFromArray(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n\n      var options = this.options;\n\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n\n      var path = Utils_1.Utils.itemFromArray(this.paths);\n      var distance = Math.floor(Math.random() * path.length) + 1;\n      var point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      var options = this.container.actualOptions;\n      var polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      var offset = 0;\n      var point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n        return tot + path.length;\n      }, 0);\n      var distance = totalLength / options.particles.number.value;\n\n      var _iterator5 = _createForOfIteratorHelper(this.paths),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var path = _step5.value;\n          var pathDistance = distance * index - offset;\n\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(this.paths),\n          _step6;\n\n      try {\n        var _loop = function _loop() {\n          var path = _step6.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n          if (pathData) {\n            var path2d = new Path2D(pathData);\n            var matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n            var finalPath = new Path2D();\n            var transform = matrix.scale(options.scale);\n\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n\n          path.path2d.closePath();\n        };\n\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"initRawData\",\n    value: function initRawData(force) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = this.options;\n\n                if (!options.url) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 4;\n                return this.downloadSvgPath(options.url, force);\n\n              case 4:\n                this.raw = _context4.sent;\n                _context4.next = 8;\n                break;\n\n              case 7:\n                if (options.data) {\n                  data = options.data;\n\n                  if (typeof data !== \"string\") {\n                    path = data.path instanceof Array ? data.path.map(function (t) {\n                      return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                    }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                    namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                  } else {\n                    svg = data;\n                  }\n\n                  this.raw = this.parseSvgPath(svg, force);\n                }\n\n              case 8:\n                this.createPath2D();\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n\n  return PolygonMaskInstance;\n}();\n\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/node_modules/tsparticles/dist/Plugins/PolygonMask/PolygonMaskInstance.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","PolygonMaskInstance","Enums_1","require","Utils_1","PolygonMask_1","OutModeDirection_1","drawPolygonMask","context","rawData","stroke","color","ColorUtils","colorToRgb","beginPath","moveTo","x","y","item","lineTo","closePath","strokeStyle","getStyleFromRgb","lineWidth","width","drawPolygonMaskPath","path","position","translate","opacity","parsePaths","paths","scale","offset","res","segments","element","pathSegList","len","numberOfItems","p","i","segment","getItem","svgPathSeg","window","SVGPathSeg","pathSegType","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","absSeg","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","relSeg","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH","push","calcClosestPtOnSegment","s1","s2","pos","NumberUtils","getDistances","dx","dy","dxx","dyy","t","Math","pow","isOnSegment","segmentBounce","start","stop","velocity","wallAngle","atan2","wallNormalX","sin","wallNormalY","cos","d","container","dimension","height","path2DSupported","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","load","polygon","polygonMaskOptions","enable","initRawData","type","Type","none","redrawTimeout","clearTimeout","setTimeout","particles","redraw","raw","inline","arrangement","InlineArrangement","onePerPoint","perPoint","drawPoints","_a","_b","length","Utils","deepExtend","randomPoint","particle","delta","direction","polygonBounce","checkInsidePolygon","polygonDraw","draw","path2d","path2dSupported","OutModeDirection","top","inside","outside","closest","getPosition","getRadius","j","pi","pj","dist","distance","undefined","factor","mult","initialPosition","getDistance","Error","Constants","noPolygonFound","canvasSize","canvas","size","random","intersect","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","getTotalLength","pxRatio","parseFloat","getAttribute","svgUrl","url","fetch","req","ok","text","parseSvgPath","addParticle","getRandomPoint","randomLength","getRandomPointByLength","equidistant","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","pathDistance","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","forEach","downloadSvgPath","data","Array","map","join","namespaces","createPath2D"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst Enums_1 = require(\"./Enums\");\nconst Utils_1 = require(\"../../Utils\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nconst OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\nfunction drawPolygonMask(context, rawData, stroke) {\n    const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.beginPath();\n    context.moveTo(rawData[0].x, rawData[0].y);\n    for (const item of rawData) {\n        context.lineTo(item.x, item.y);\n    }\n    context.closePath();\n    context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n    context.lineWidth = stroke.width;\n    context.stroke();\n}\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n    context.translate(position.x, position.y);\n    const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n    context.lineWidth = stroke.width;\n    context.stroke(path);\n}\nfunction parsePaths(paths, scale, offset) {\n    const res = [];\n    for (const path of paths) {\n        const segments = path.element.pathSegList;\n        const len = segments.numberOfItems;\n        const p = {\n            x: 0,\n            y: 0,\n        };\n        for (let i = 0; i < len; i++) {\n            const segment = segments.getItem(i);\n            const svgPathSeg = window.SVGPathSeg;\n            switch (segment.pathSegType) {\n                case svgPathSeg.PATHSEG_MOVETO_ABS:\n                case svgPathSeg.PATHSEG_LINETO_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                case svgPathSeg.PATHSEG_ARC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {\n                    const absSeg = segment;\n                    p.x = absSeg.x;\n                    p.y = absSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                    p.x = segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                    p.y = segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_REL:\n                case svgPathSeg.PATHSEG_MOVETO_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                case svgPathSeg.PATHSEG_ARC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {\n                    const relSeg = segment;\n                    p.x += relSeg.x;\n                    p.y += relSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                    p.x += segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                    p.y += segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_UNKNOWN:\n                case svgPathSeg.PATHSEG_CLOSEPATH:\n                    continue;\n            }\n            res.push({\n                x: p.x * scale + offset.x,\n                y: p.y * scale + offset.y,\n            });\n        }\n    }\n    return res;\n}\nfunction calcClosestPtOnSegment(s1, s2, pos) {\n    const { dx, dy } = Utils_1.NumberUtils.getDistances(pos, s1);\n    const { dx: dxx, dy: dyy } = Utils_1.NumberUtils.getDistances(s2, s1);\n    const t = (dx * dxx + dy * dyy) / (Math.pow(dxx, 2) + Math.pow(dyy, 2));\n    let x = s1.x + dxx * t;\n    let y = s1.y + dyy * t;\n    if (t < 0) {\n        x = s1.x;\n        y = s1.y;\n    }\n    else if (t > 1) {\n        x = s2.x;\n        y = s2.y;\n    }\n    return { x: x, y: y, isOnSegment: t >= 0 && t <= 1 };\n}\nfunction segmentBounce(start, stop, velocity) {\n    const { dx, dy } = Utils_1.NumberUtils.getDistances(start, stop);\n    const wallAngle = Math.atan2(dy, dx);\n    const wallNormalX = Math.sin(wallAngle);\n    const wallNormalY = -Math.cos(wallAngle);\n    const d = 2 * (velocity.x * wallNormalX + velocity.y * wallNormalY);\n    velocity.x -= d * wallNormalX;\n    velocity.y -= d * wallNormalY;\n}\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    initAsync(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n            const polygonMaskOptions = this.options;\n            this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n            if (polygonMaskOptions.enable) {\n                yield this.initRawData();\n            }\n        });\n    }\n    resize() {\n        const container = this.container;\n        const options = this.options;\n        if (!(options.enable && options.type !== Enums_1.Type.none)) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.initRawData(true);\n            container.particles.redraw();\n        }), 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === Enums_1.Type.inline &&\n            (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint ||\n                options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== Enums_1.Type.none &&\n            options.type !== Enums_1.Type.inline &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options;\n        const polygonDraw = options.draw;\n        if (!(options.enable && polygonDraw.enable)) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d;\n            const path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== OutModeDirection_1.OutModeDirection.top) {\n            return false;\n        }\n        if (options.type === Enums_1.Type.inside || options.type === Enums_1.Type.outside) {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = calcClosestPtOnSegment(pi, pj, pos);\n                const dist = Utils_1.NumberUtils.getDistances(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    segmentBounce(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === Enums_1.Type.inline && particle.initialPosition) {\n            const dist = Utils_1.NumberUtils.getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container;\n        const options = this.options;\n        if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Utils_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size;\n        const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n        const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i];\n            const pj = this.raw[j];\n            const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container;\n        const options = this.options;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xml, \"image/svg+xml\");\n        const svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio;\n        const scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    downloadSvgPath(svgUrl, force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = this.options;\n            const url = svgUrl || options.url;\n            const forceDownload = force !== null && force !== void 0 ? force : false;\n            if (!url || (this.paths !== undefined && !forceDownload)) {\n                return this.raw;\n            }\n            const req = yield fetch(url);\n            if (!req.ok) {\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n            }\n            return this.parseSvgPath(yield req.text(), force);\n        });\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container;\n        const options = this.options;\n        let position;\n        if (options.type === Enums_1.Type.inline) {\n            switch (options.inline.arrangement) {\n                case Enums_1.InlineArrangement.randomPoint:\n                    position = this.getRandomPoint();\n                    break;\n                case Enums_1.InlineArrangement.randomLength:\n                    position = this.getRandomPointByLength();\n                    break;\n                case Enums_1.InlineArrangement.equidistant:\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case Enums_1.InlineArrangement.onePerPoint:\n                case Enums_1.InlineArrangement.perPoint:\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = Utils_1.Utils.itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const path = Utils_1.Utils.itemFromArray(this.paths);\n        const distance = Math.floor(Math.random() * path.length) + 1;\n        const point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions;\n        const polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        let offset = 0;\n        let point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n        const distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData);\n                const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                const finalPath = new Path2D();\n                const transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    initRawData(force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = this.options;\n            if (options.url) {\n                this.raw = yield this.downloadSvgPath(options.url, force);\n            }\n            else if (options.data) {\n                const data = options.data;\n                let svg;\n                if (typeof data !== \"string\") {\n                    const path = data.path instanceof Array\n                        ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                        : `<path d=\"${data.path}\" />`;\n                    const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n                }\n                else {\n                    svg = data;\n                }\n                this.raw = this.parseSvgPath(svg, force);\n            }\n            this.createPath2D();\n        });\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"]},"metadata":{},"sourceType":"script"}