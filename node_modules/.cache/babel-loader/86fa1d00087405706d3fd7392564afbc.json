{"ast":null,"code":"var _jsxFileName = \"/Users/zeeshanpatel/flow/src/components/Timer.js\";\nimport \"./timer.css\";\nimport { Component } from \"react\";\nimport { Spring } from \"react-spring\"; // create a form with a simple structure\n// absolute positioned in the center of the screen\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Label = styled.form`\n  position: absolute;\n  left: 50%;\n  top: 25%;\n  transform: translate(-50%, -50%);\n  padding: 1.2rem 0.8rem;\n  box-shadow: 0 0 0 2px #0088ff;\n  background: #03031b;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  line-height: 2;\n`;\n_c = Label;\nconst LabelText = styled.label`\n  color: #fff;\n  font-size: 0.7rem;\n  margin: 0.25rem 0;\n`;\n_c2 = LabelText;\nconst LabelInput = styled.input`\n  background: none;\n  border: none;\n  border-left: 2px solid #0088ff;\n  border-radius: 1px;\n  font-family: inherit;\n  font-size: 0.9rem;\n  font-weight: 300;\n  padding: 0.25rem 0.75rem;\n  color: #fff;\n\n\n`;\n_c3 = LabelInput;\n\nconst OutputLabel = ({\n  label,\n  handleTimerLabelInput\n}) => {\n  return /*#__PURE__*/_jsxDEV(Label, {\n    onSubmit: handleTimerLabelInput,\n    children: [/*#__PURE__*/_jsxDEV(LabelText, {\n      children: \"Timer's Label\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LabelInput, {\n      type: \"text\",\n      placeholder: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}; // show the countdown timer through an SVG element, displaying the countdown in a text element\n// wrap the text in a path element, animated to display the theme color as the timer progresses\n\n\n_c4 = OutputLabel;\n\nconst OutputDisplay = ({\n  total,\n  timeTotal,\n  label,\n  isLabel,\n  handleTimerLabel,\n  handleTimerLabelInput\n}) => {\n  // create the number of seconds, minutes and hours from timeTotal\n  let s = timeTotal;\n  let m = 0;\n  let h = 0;\n\n  while (s >= 60) {\n    s -= 60;\n    m += 1;\n  }\n\n  while (m >= 60) {\n    m -= 60;\n    h += 1;\n  } // show the hours, minutes, seconds one after the other\n  // using the unchanged value representing the total time, describe the amount of time only necessary\n  // meaning, if the total is less than an hout, don't show the hour's label\n\n\n  const time = {};\n\n  if (total >= 3600) {\n    time.h = h;\n  }\n\n  if (total >= 60) {\n    time.m = m;\n  }\n\n  time.s = s; // detail the entries of the time object\n\n  const timeValues = Object.entries(time); // create a text element for each array displaying the label and amount of time\n\n  const Text = timeValues.map((entry, index) => {\n    // with 3 items, show them at 25, 50, 75%\n    // with 2, at 33, 66%\n    const position = 90 / (timeValues.length + 1) * (index + 1);\n    return /*#__PURE__*/_jsxDEV(\"text\", {\n      x: position,\n      y: \"50\",\n      fill: \"#0088ff\",\n      alignmentBaseline: \"middle\",\n      textAnchor: \"middle\",\n      fontWeight: \"bold\",\n      fontSize: \"1rem\",\n      children: [entry[1], /*#__PURE__*/_jsxDEV(\"tspan\", {\n        fontSize: \"0.35rem\",\n        alignmentBaseline: \"hanging\",\n        children: entry[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, entry[0], true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }); // to animate the path, its length is necessary to animate it into view\n  // as the path describes a circle, the length is equal to the perimeter of the circle\n\n  const perimeter = 43 * 2 * 3.14; // use a variable ranging between 0-1 to show the colored circle atop the white one\n  // animating the strokeDashoffset property until it is equal to strokeDasharray\n\n  const progress = 1 - timeTotal / total; // use the same value for the circle element, to rotate it as the path is animated\n  // 0-1 range --> 0-360 range\n\n  const transform = `rotate(-${progress * 360}) translate(0 -43) rotate(${progress * 360})`;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [isLabel && /*#__PURE__*/_jsxDEV(OutputLabel, {\n      label: label,\n      handleTimerLabelInput: handleTimerLabelInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"0 0 100 100\",\n      width: \"70%\",\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: \"translate(5 5)\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M 45 2 a 43 43 0 0 0 0 86 a 43 43 0 0 0 0 -86\",\n          stroke: \"#fff\",\n          strokeWidth: \"2\",\n          fill: \"none\",\n          shapeRendering: \"geometricPrecision\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M 45 2 a 43 43 0 0 0 0 86 a 43 43 0 0 0 0 -86\",\n          stroke: \"#0088ff\",\n          strokeWidth: \"2\",\n          strokeDasharray: perimeter,\n          strokeDashoffset: perimeter - perimeter * progress,\n          fill: \"none\",\n          shapeRendering: \"geometricPrecision\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          r: \"3.2\",\n          cx: \"45\",\n          cy: \"45\",\n          fill: \"#0088ff\",\n          transform: transform\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: \"45\",\n          y: \"30\",\n          fill: \"#fff\",\n          alignmentBaseline: \"middle\",\n          textAnchor: \"middle\",\n          fontSize: \"0.35rem\",\n          onClick: handleTimerLabel,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), Text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}; // fabricate the round button nesting the SVG for the start of the timer\n\n\n_c5 = OutputDisplay;\nconst TimerButton = styled.button`\n  width: 52px;\n  height: 52px;\n  border-radius: 50%;\n  padding: 0.6rem;\n  color: #0088ff;\n  background: #0088ff;\n  box-shadow: 0 1px 5px -2px #0088ff;\n  &:hover {\n    transition: box-shadow 0.2s ease-out;\n    box-shadow: 0 1px 5px 0px #0088ff;\n  }\n`;\n/*\ndiv displaying the contents of the two interfaces in a single column layout\nhorizontally centered\n*/\n\n_c6 = TimerButton;\nconst OutputContainer = styled.div`\n  max-width: 380px;\n  width: 90vw;\n  margin: 2rem auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1rem;\n`;\n_c7 = OutputContainer;\nconst OutputControls = styled.div`\n  margin-top: 3rem;\n  display: grid;\n  grid-column-gap: 2rem;\n  grid-template-columns: repeat(3, 80px);\n  align-items: center;\n  justify-items: center;\n`;\n_c8 = OutputControls;\n\nconst TimerOutput = ({\n  total,\n  timeTotal,\n  label,\n  isLabel,\n  isPlaying,\n  handleTimerToggle,\n  handleTimerNew,\n  handleTimerAdd,\n  handleTimerReset,\n  handleTimerLabel,\n  handleTimerLabelInput\n}) => {\n  // render the display atop a series of buttons enabling the project's functionalities\n  return /*#__PURE__*/_jsxDEV(Spring, {\n    from: {\n      opacity: 0,\n      transform: 'translateY(2.5rem)'\n    },\n    to: {\n      opacity: 1,\n      transform: 'translateY(0)'\n    },\n    children: ({\n      opacity,\n      transform\n    }) => /*#__PURE__*/_jsxDEV(OutputContainer, {\n      style: {\n        opacity,\n        transform\n      },\n      children: [/*#__PURE__*/_jsxDEV(OutputDisplay, {\n        total: total,\n        timeTotal: timeTotal,\n        label: label,\n        isLabel: isLabel,\n        handleTimerLabel: handleTimerLabel,\n        handleTimerLabelInput: handleTimerLabelInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(OutputControls, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTimerNew,\n          children: \"New Timer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TimerButton, {\n          onClick: handleTimerToggle,\n          children: isPlaying ? /*#__PURE__*/_jsxDEV(\"svg\", {\n            viewBox: \"0 0 100 100\",\n            children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n              x: \"30\",\n              y: \"30\",\n              width: \"10\",\n              height: \"40\",\n              stroke: \"#eee\",\n              strokeWidth: \"6px\",\n              fill: \"currentColor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n              x: \"60\",\n              y: \"30\",\n              width: \"10\",\n              height: \"40\",\n              stroke: \"#eee\",\n              strokeWidth: \"6px\",\n              fill: \"currentColor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n            viewBox: \"0 0 100 100\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M 40 30 l 30 20 l -30 20 Z\",\n              stroke: \"#eee\",\n              strokeWidth: \"7px\",\n              fill: \"currentColor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 15\n        }, this), isPlaying ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTimerAdd,\n          children: \"Add +1:00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTimerReset,\n          children: \"Reset Timer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n}; // display the time and the button removing the last digit side by side\n\n\n_c9 = TimerOutput;\nconst Input = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 0.5rem 0.75rem;\n  margin-bottom: 1rem;\n  border-bottom: 2px solid #ffffff11;\n  transition: color 0.2s ease-out;\n  // style the color of the text (and the svg element through the currentColor property) based on the props boolean\n  color: ${props => props.isInput ? '#ffffff' : '#ffffff55'};\n`; // display the span elements side by side, in a heading stretching to occupy as much space as available\n\n_c10 = Input;\nconst InputTime = styled.h2`\n  flex-grow: 1;\n  display: flex;\n  font-size: 2rem;\n  font-weight: 500;\n`;\n_c11 = InputTime;\nconst InputSpan = styled.span`\n  flex-grow: 1;\n  width: 0;\n  margin: 0 0.75rem;\n  position: relative;\n\n  // add the short label for hours, minutes, seconds by accessing the suffix argument passed through props\n  &:after {\n    content: '${props => props.suffix}';\n    font-size: 0.8rem;\n    margin-left: 0.15rem;\n  }\n`;\n_c12 = InputSpan;\nconst InputButton = styled.button`\n  width: 70px;\n  height: 50px;\n  padding: 0.3rem;\n`; // function formatting the time, to always show two digits (zero-padded values)\n\n_c13 = InputButton;\n\nfunction formatTime(time) {\n  return time >= 10 ? time : `0${time}`;\n}\n\nconst InputDisplay = ({\n  isInput,\n  time,\n  handleDialBack\n}) => {\n  // create three span elements out of the hours, minutes and seconds depicted in the time object\n\n  /* structured as follows\n  {\n    h,\n    m,\n    s\n  }\n  */\n  const InputPair = Object.entries(time);\n  const InputSpans = InputPair.map(pair => /*#__PURE__*/_jsxDEV(InputSpan, {\n    suffix: pair[0],\n    children: formatTime(pair[1])\n  }, pair[0], false, {\n    fileName: _jsxFileName,\n    lineNumber: 397,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Input, {\n    isInput: isInput,\n    children: [/*#__PURE__*/_jsxDEV(InputTime, {\n      children: InputSpans\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputButton, {\n      onClick: handleDialBack,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 100 100\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M 50 37.5 l 25 25\",\n          strokeWidth: \"5px\",\n          stroke: \"currentColor\",\n          fill: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M 50 62.5 l 25 -25\",\n          strokeWidth: \"5px\",\n          stroke: \"currentColor\",\n          fill: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M 40 20 h 50 v 60 h -50 l -20 -30 Z\",\n          strokeWidth: \"5px\",\n          stroke: \"currentColor\",\n          fill: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 5\n  }, this);\n}; // in the dial show the digits from 0 to 9, in a grid\n\n\n_c14 = InputDisplay;\nconst Dial = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  width: 85%;\n  grid-gap: 1.8rem 1rem;\n\tmargin-bottom: 1.25rem;\n`; // for the digits, these are included through buttons styled to change their appearance on hover/focus\n\n_c15 = Dial;\nconst Digit = styled.button`\n  font-size: 2rem;\n  transition: all 0.2s ease-out;\n  font-weight: 600;\n  position: relative;\n  color: #ffffff55;\n\t// for the focus and active state substitute the default outline highlighting the button through a fully opaque color and a pseudo element\n\toutline: none;\n  // push the first digit, 0, to the very bottom of the timer\n  &:nth-of-type(1) {\n    grid-row: 4/5;\n    grid-column: 1/-1;\n  }\n  &:before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 50px;\n    height: 50px;\n    transform:  translate(-50%, -50%) scale(0);\n    background: #fff;\n    border-radius: 50%;\n  }\n  &:hover, &:focus {\n    color: #fff;\n  }\n  &:hover:before, &:focus:before {\n    transition: all 0.2s ease-out;\n    // transition occurring only as the mouse hovers in the element\n    transition-delay: 0.1s;\n    transform:  translate(-50%, -50%) scale(1);\n    opacity: 0;\n  }\n`;\n_c16 = Digit;\n\nconst InputDial = ({\n  handleDial\n}) => {\n  // create an array of ten items, including the digits from 0 to 9 in the styled button\n  const Digits = [];\n\n  for (let i = 0; i < 10; i += 1) {\n    Digits.push( /*#__PURE__*/_jsxDEV(Digit, {\n      onClick: handleDial,\n      children: i\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 7\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(Dial, {\n    children: Digits\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 511,\n    columnNumber: 5\n  }, this);\n};\n/*\ndiv displaying the contents of the two interfaces in a single column layout\nhorizontally centered\n*/\n\n\n_c17 = InputDial;\nconst InputContainer = styled.div`\n  max-width: 380px;\n  width: 90vw;\n  margin: 2rem auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1rem;\n`;\n_c18 = InputContainer;\n\nconst TimerInput = ({\n  input,\n  time,\n  handleDial,\n  handleDialBack,\n  handleTimerStart\n}) => {\n  // render the display atop the dial and the button\n  return /*#__PURE__*/_jsxDEV(Spring, {\n    from: {\n      opacity: 0,\n      transform: 'translateY(-2.5rem)'\n    },\n    to: {\n      opacity: 1,\n      transform: 'translateY(0)'\n    },\n    children: ({\n      opacity,\n      transform\n    }) => /*#__PURE__*/_jsxDEV(InputContainer, {\n      style: {\n        opacity,\n        transform\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputDisplay, {\n        isInput: input.length !== 0,\n        time: time,\n        handleDialBack: handleDialBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(InputDial, {\n        handleDial: handleDial\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 13\n      }, this), input &&\n      /*#__PURE__*/\n      // start the timer when clicking the button\n      _jsxDEV(TimerButton, {\n        onClick: handleTimerStart,\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 100 100\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M 40 30 l 30 20 l -30 20 Z\",\n            stroke: \"#eee\",\n            strokeWidth: \"7px\",\n            fill: \"currentColor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 537,\n    columnNumber: 5\n  }, this);\n};\n/*\ndiv displaying the contents of the two interfaces in a single column layout\nhorizontally centered\n*/\n// main component rendered through index.js\n\n\n_c19 = TimerInput;\nexport class Timer extends Component {\n  constructor(props) {\n    super(props);\n    /* in the state specify the following\n    - input, keeping track of the digits included through the dial in a string\n    - time, keeping track of the number of hours, minutes and seconds in an object\n    - timeTotal, keeping track of the number of seconds specified through the time object\n    - total, to save the total number of seconds and use it to reset the timer to this value\n    - label, a string describing the text shown in the output\n    - isTimer, to show the input or output interface\n    - isPlaying, to toggle between play and pause in the output interface\n    - isLabel, to toggle the label component\n    */\n\n    this.state = {\n      input: '',\n      time: {\n        h: 0,\n        m: 0,\n        s: 0\n      },\n      timeTotal: 0,\n      total: 0,\n      label: 'Label',\n      isTimer: false,\n      isPlaying: false,\n      isLabel: false\n    }; // bind the functions to update the state and enable the timer's functionalities\n\n    this.handleDial = this.handleDial.bind(this);\n    this.handleDialBack = this.handleDialBack.bind(this);\n    this.handleTimerStart = this.handleTimerStart.bind(this);\n    this.handleTimerToggle = this.handleTimerToggle.bind(this);\n    this.handleTimerAdd = this.handleTimerAdd.bind(this);\n    this.handleTimerNew = this.handleTimerNew.bind(this);\n    this.handleTimerReset = this.handleTimerReset.bind(this);\n    this.handleTimerLabel = this.handleTimerLabel.bind(this);\n    this.handleTimerLabelInput = this.handleTimerLabelInput.bind(this);\n  } // function updating time and TimeTotal, on the basis of the 6 letters top string\n\n\n  updateTime(input) {\n    // based on the input string, create a six-letter long string (adding 0 at the beginning)\n    const inputTime = input.padStart(6, 0); // separate the hours, minutes and seconds\n\n    let h = parseInt(inputTime.substring(0, 2), 10);\n    let m = parseInt(inputTime.substring(2, 4), 10);\n    let s = parseInt(inputTime.substring(4)); // compute the total\n\n    const timeTotal = h * 60 * 60 + m * 60 + s;\n    const time = {\n      h,\n      m,\n      s\n    }; // update the object and the integer\n\n    this.setState({\n      time,\n      timeTotal,\n      total: timeTotal\n    });\n  } // function handling a press on the dial's buttons\n\n\n  handleDial(e) {\n    // retrieve the button's text element (0-9 value)\n    const {\n      textContent\n    } = e.target; // retrieve the input from the state\n\n    let {\n      input\n    } = this.state;\n    const {\n      length\n    } = input; // if the button pressed is 0 and the input doesn't already have a value, preemptively exit the function\n\n    if (textContent === '0' && length === 0) {\n      return;\n    } // if the input is less than 6 characters long (hhmmss), add the digit to the input string and update the state\n\n\n    if (length < 6) {\n      input += textContent;\n      this.setState({\n        input\n      }); // update the time and timeTotal\n\n      this.updateTime(input);\n    }\n  } // function handling a press on the dial's back button\n\n\n  handleDialBack(e) {\n    // retrieve the input from the state\n    let {\n      input\n    } = this.state;\n    const {\n      length\n    } = input; // if input has at least a character, remove the last digit\n\n    if (length > 0) {\n      input = input.substring(0, length - 1); // update the state\n\n      this.setState({\n        input\n      });\n    } // update the time and timeToal\n\n\n    this.updateTime(input);\n  } // function starting the timer\n\n\n  startTimer() {\n    // start a timer from timeTotal, decreasing its value one second at a time\n    this.intervalID = setInterval(() => {\n      let {\n        timeTotal\n      } = this.state;\n      timeTotal -= 1;\n      this.setState({\n        timeTotal: timeTotal\n      }); // when reaching 0, clear the interval\n\n      if (timeTotal === 0) {\n        clearInterval(this.intervalID);\n      }\n    }, 1000);\n  } // function handling a press on the button starting the timer\n\n\n  handleTimerStart() {\n    // update the UI showing the output interface and the pause button\n    this.setState({\n      isTimer: true,\n      isPlaying: true\n    }); // start the timer\n\n    this.startTimer();\n  } // function handling a press on the button pausing/starting the timer\n\n\n  handleTimerToggle() {\n    // based on the isPlaying boolean stop the interval or start it anew\n    const {\n      isPlaying\n    } = this.state;\n\n    if (isPlaying) {\n      clearInterval(this.intervalID);\n    } else {\n      this.startTimer();\n    } // update the UI of the button\n\n\n    this.setState({\n      isPlaying: !this.state.isPlaying\n    });\n  } // function handling a press on the +1:00 button\n\n\n  handleTimerAdd() {\n    // add a minute to the total\n    const {\n      timeTotal,\n      total\n    } = this.state;\n    this.setState({\n      timeTotal: timeTotal + 60,\n      total: total + 60\n    });\n  } // function handling a press on the new timer button\n\n\n  handleTimerNew() {\n    // stop the ongoing interval, if there's one\n    clearInterval(this.intervalID); // reset the input and update the state showing the input UI\n\n    const input = '';\n    this.setState({\n      isTimer: false,\n      input\n    }); // update the time with the now empty input\n\n    this.updateTime(input);\n  } // function handling a press on the reset button\n\n\n  handleTimerReset() {\n    // stop the ongoing interval\n    clearInterval(this.intervalID); // retrieve the input value\n\n    const {\n      input\n    } = this.state; // update the timer with the old existing value and start the timer\n\n    this.updateTime(input);\n    this.handleTimerStart();\n  } // function handling a press on the label text\n\n\n  handleTimerLabel() {\n    this.setState({\n      isLabel: true\n    });\n  } // function handling input in the label component\n\n\n  handleTimerLabelInput(e) {\n    e.preventDefault(); // update the label with the input value\n\n    const {\n      value: label\n    } = e.target.querySelector('input');\n\n    if (label) {\n      this.setState({\n        label,\n        isLabel: false\n      });\n    }\n  }\n\n  render() {\n    // destructure the necessary information from the state\n    const {\n      input,\n      time,\n      isTimer,\n      isPlaying,\n      timeTotal,\n      total,\n      label,\n      isLabel\n    } = this.state; // based on the boolean show the input or output component\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isTimer ?\n      /*#__PURE__*/\n\n      /* TimerOutput\n      displaying the countdown timer through **timeTotal**\n      showing the pause/play button according to **isPlaying**\n      handling functionalities such as pausing/starting the timer, adding a minute, resetting and finally removing the timer */\n      _jsxDEV(TimerOutput, {\n        total: total,\n        timeTotal: timeTotal,\n        label: label,\n        isPlaying: isPlaying,\n        isLabel: isLabel,\n        handleTimerToggle: this.handleTimerToggle,\n        handleTimerNew: this.handleTimerNew,\n        handleTimerAdd: this.handleTimerAdd,\n        handleTimerReset: this.handleTimerReset,\n        handleTimerLabel: this.handleTimerLabel,\n        handleTimerLabelInput: this.handleTimerLabelInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 811,\n        columnNumber: 13\n      }, this) :\n      /*#__PURE__*/\n\n      /* TimerInput\n      adding the digits to **input**\n      displaying the digits as per **time**\n      handling functionalities such as adding digits, removing them, starting the timer */\n      _jsxDEV(TimerInput, {\n        input: input,\n        time: time,\n        handleDial: this.handleDial,\n        handleDialBack: this.handleDialBack,\n        handleTimerStart: this.handleTimerStart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19;\n\n$RefreshReg$(_c, \"Label\");\n$RefreshReg$(_c2, \"LabelText\");\n$RefreshReg$(_c3, \"LabelInput\");\n$RefreshReg$(_c4, \"OutputLabel\");\n$RefreshReg$(_c5, \"OutputDisplay\");\n$RefreshReg$(_c6, \"TimerButton\");\n$RefreshReg$(_c7, \"OutputContainer\");\n$RefreshReg$(_c8, \"OutputControls\");\n$RefreshReg$(_c9, \"TimerOutput\");\n$RefreshReg$(_c10, \"Input\");\n$RefreshReg$(_c11, \"InputTime\");\n$RefreshReg$(_c12, \"InputSpan\");\n$RefreshReg$(_c13, \"InputButton\");\n$RefreshReg$(_c14, \"InputDisplay\");\n$RefreshReg$(_c15, \"Dial\");\n$RefreshReg$(_c16, \"Digit\");\n$RefreshReg$(_c17, \"InputDial\");\n$RefreshReg$(_c18, \"InputContainer\");\n$RefreshReg$(_c19, \"TimerInput\");","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/src/components/Timer.js"],"names":["Component","Spring","Label","styled","form","LabelText","label","LabelInput","input","OutputLabel","handleTimerLabelInput","OutputDisplay","total","timeTotal","isLabel","handleTimerLabel","s","m","h","time","timeValues","Object","entries","Text","map","entry","index","position","length","perimeter","progress","transform","TimerButton","button","OutputContainer","div","OutputControls","TimerOutput","isPlaying","handleTimerToggle","handleTimerNew","handleTimerAdd","handleTimerReset","opacity","Input","props","isInput","InputTime","h2","InputSpan","span","suffix","InputButton","formatTime","InputDisplay","handleDialBack","InputPair","InputSpans","pair","Dial","Digit","InputDial","handleDial","Digits","i","push","InputContainer","TimerInput","handleTimerStart","Timer","constructor","state","isTimer","bind","updateTime","inputTime","padStart","parseInt","substring","setState","e","textContent","target","startTimer","intervalID","setInterval","clearInterval","preventDefault","value","querySelector","render"],"mappings":"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","sourcesContent":["import \"./timer.css\"\nimport { Component } from \"react\"\nimport {Spring } from \"react-spring\"\n\n\n\n\n\n// create a form with a simple structure\n// absolute positioned in the center of the screen\nconst Label = styled.form`\n  position: absolute;\n  left: 50%;\n  top: 25%;\n  transform: translate(-50%, -50%);\n  padding: 1.2rem 0.8rem;\n  box-shadow: 0 0 0 2px #0088ff;\n  background: #03031b;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  line-height: 2;\n`;\nconst LabelText = styled.label`\n  color: #fff;\n  font-size: 0.7rem;\n  margin: 0.25rem 0;\n`;\n\nconst LabelInput = styled.input`\n  background: none;\n  border: none;\n  border-left: 2px solid #0088ff;\n  border-radius: 1px;\n  font-family: inherit;\n  font-size: 0.9rem;\n  font-weight: 300;\n  padding: 0.25rem 0.75rem;\n  color: #fff;\n\n\n`;\nconst OutputLabel = ({ label, handleTimerLabelInput }) => {\n  return (\n    <Label\n      onSubmit={handleTimerLabelInput}>\n      <LabelText>Timer's Label</LabelText>\n      <LabelInput\n        type=\"text\"\n        placeholder={label}\n      />\n    </Label>\n  )\n};\n\n\n\n// show the countdown timer through an SVG element, displaying the countdown in a text element\n// wrap the text in a path element, animated to display the theme color as the timer progresses\nconst OutputDisplay = ({ total, timeTotal, label, isLabel, handleTimerLabel, handleTimerLabelInput }) => {\n  // create the number of seconds, minutes and hours from timeTotal\n  let s = timeTotal;\n  let m = 0;\n  let h = 0;\n  while (s >= 60) {\n    s -= 60;\n    m += 1;\n  }\n\n  while (m >= 60) {\n    m -= 60;\n    h += 1;\n  }\n  // show the hours, minutes, seconds one after the other\n  // using the unchanged value representing the total time, describe the amount of time only necessary\n  // meaning, if the total is less than an hout, don't show the hour's label\n  const time = {};\n  if (total >= 3600) {\n    time.h = h;\n  }\n  if (total >= 60) {\n    time.m = m;\n  }\n  time.s = s;\n\n  // detail the entries of the time object\n  const timeValues = Object.entries(time);\n  // create a text element for each array displaying the label and amount of time\n  const Text = timeValues.map((entry, index) => {\n    // with 3 items, show them at 25, 50, 75%\n    // with 2, at 33, 66%\n    const position = 90 / (timeValues.length + 1) * (index + 1);\n    return ((\n      <text\n        x={position}\n        y=\"50\"\n        fill=\"#0088ff\"\n        alignmentBaseline=\"middle\"\n        textAnchor=\"middle\"\n        key={entry[0]}\n        fontWeight=\"bold\"\n        fontSize=\"1rem\"\n      >\n        {entry[1]}\n        <tspan\n          fontSize=\"0.35rem\"\n          alignmentBaseline=\"hanging\"\n        >\n          {entry[0]}\n        </tspan>\n      </text>\n    ));\n  })\n\n  // to animate the path, its length is necessary to animate it into view\n  // as the path describes a circle, the length is equal to the perimeter of the circle\n  const perimeter = 43 * 2 * 3.14;\n\n  // use a variable ranging between 0-1 to show the colored circle atop the white one\n  // animating the strokeDashoffset property until it is equal to strokeDasharray\n  const progress = (1 - timeTotal / total);\n  // use the same value for the circle element, to rotate it as the path is animated\n  // 0-1 range --> 0-360 range\n  const transform = `rotate(-${progress * 360}) translate(0 -43) rotate(${progress * 360})`;\n\n\n  return (\n    <React.Fragment>\n      {/* aside from the output, display an additional element to change the label in the display\n        component toggled and absolute positioned atop the display\n      */}\n      {\n        isLabel &&\n        <OutputLabel\n          label={label}\n          handleTimerLabelInput={handleTimerLabelInput} />\n\n      }\n      <svg viewBox=\"0 0 100 100\" width=\"70%\">\n        {/* group to center the elements in the svg, and avoid the circle from being cropped out */}\n        <g transform=\"translate(5 5)\">\n\n          {/* two overlapping path elements, showing the colored one atop the white one (the later an element is created, the higher its elevation, so to speak) */}\n          <path\n            d=\"M 45 2 a 43 43 0 0 0 0 86 a 43 43 0 0 0 0 -86\"\n            stroke=\"#fff\"\n            strokeWidth=\"2\"\n            fill=\"none\"\n            shapeRendering=\"geometricPrecision\"\n          />\n\n          <path\n            d=\"M 45 2 a 43 43 0 0 0 0 86 a 43 43 0 0 0 0 -86\"\n            stroke=\"#0088ff\"\n            strokeWidth=\"2\"\n            strokeDasharray={perimeter}\n            strokeDashoffset={perimeter - (perimeter * progress)}\n            fill=\"none\"\n            shapeRendering=\"geometricPrecision\"\n          />\n\n          {/* circle showing the progress */}\n          <circle\n            r=\"3.2\"\n            cx=\"45\"\n            cy=\"45\"\n            fill=\"#0088ff\"\n            transform={transform}\n          />\n\n\n          <text\n            x=\"45\"\n            y=\"30\"\n            fill=\"#fff\"\n            alignmentBaseline=\"middle\"\n            textAnchor=\"middle\"\n            fontSize=\"0.35rem\"\n            onClick={handleTimerLabel}\n          >\n            {label}\n          </text>\n          {\n            Text\n          }\n        </g>\n\n      </svg>\n    </React.Fragment>\n  )\n};\n\n\n\n// fabricate the round button nesting the SVG for the start of the timer\nconst TimerButton = styled.button`\n  width: 52px;\n  height: 52px;\n  border-radius: 50%;\n  padding: 0.6rem;\n  color: #0088ff;\n  background: #0088ff;\n  box-shadow: 0 1px 5px -2px #0088ff;\n  &:hover {\n    transition: box-shadow 0.2s ease-out;\n    box-shadow: 0 1px 5px 0px #0088ff;\n  }\n`;\n\n/*\ndiv displaying the contents of the two interfaces in a single column layout\nhorizontally centered\n*/\nconst OutputContainer = styled.div`\n  max-width: 380px;\n  width: 90vw;\n  margin: 2rem auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1rem;\n`;\n\nconst OutputControls = styled.div`\n  margin-top: 3rem;\n  display: grid;\n  grid-column-gap: 2rem;\n  grid-template-columns: repeat(3, 80px);\n  align-items: center;\n  justify-items: center;\n`;\n\nconst TimerOutput = ({ total, timeTotal, label, isLabel, isPlaying, handleTimerToggle, handleTimerNew, handleTimerAdd, handleTimerReset, handleTimerLabel, handleTimerLabelInput }) => {\n  // render the display atop a series of buttons enabling the project's functionalities\n  return (\n    <Spring\n      from={{ opacity: 0, transform: 'translateY(2.5rem)' }}\n      to={{ opacity: 1, transform: 'translateY(0)' }}\n    >\n      {\n        ({ opacity, transform }) => (\n\n\n          <OutputContainer\n            style={{ opacity, transform }}>\n            {/* display component using timeTotal, describing the time being counted down, and total, the unchanged total (to compute the relative progress) */}\n            <OutputDisplay\n              total={total}\n              timeTotal={timeTotal}\n              label={label}\n              isLabel={isLabel}\n              handleTimerLabel={handleTimerLabel}\n              handleTimerLabelInput={handleTimerLabelInput}\n            />\n\n            <OutputControls>\n\n              {/* button to go back to the input UI */}\n              <button\n                onClick={handleTimerNew}\n              >\n                New Timer\n        </button>\n\n              {/* button to toggle the timer  */}\n              <TimerButton\n                onClick={handleTimerToggle}\n              >\n                {\n                  isPlaying ?\n\n                    <svg\n                      viewBox=\"0 0 100 100\"\n                    >\n                      <rect\n                        x=\"30\"\n                        y=\"30\"\n                        width=\"10\"\n                        height=\"40\"\n                        stroke=\"#eee\"\n                        strokeWidth=\"6px\"\n                        fill=\"currentColor\"\n                      />\n                      <rect\n                        x=\"60\"\n                        y=\"30\"\n                        width=\"10\"\n                        height=\"40\"\n                        stroke=\"#eee\"\n                        strokeWidth=\"6px\"\n                        fill=\"currentColor\"\n                      />\n                    </svg>\n\n                    :\n\n                    <svg\n                      viewBox=\"0 0 100 100\"\n                    >\n                      <path\n                        d=\"M 40 30 l 30 20 l -30 20 Z\"\n                        stroke=\"#eee\"\n                        strokeWidth=\"7px\"\n                        fill=\"currentColor\"\n                      />\n                    </svg>\n                }\n              </TimerButton>\n\n              {/* button to either add 1 minute or reset the timer, based on whether the timer is paused */}\n              {\n                isPlaying ?\n                  <button\n                    onClick={handleTimerAdd}\n                  >\n                    Add +1:00\n            </button>\n\n                  :\n\n                  <button\n                    onClick={handleTimerReset}\n                  >\n                    Reset Timer\n            </button>\n\n              }\n\n            </OutputControls>\n\n          </OutputContainer>\n        )\n      }\n\n    </Spring>\n  );\n};\n\n\n// display the time and the button removing the last digit side by side\nconst Input = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 0.5rem 0.75rem;\n  margin-bottom: 1rem;\n  border-bottom: 2px solid #ffffff11;\n  transition: color 0.2s ease-out;\n  // style the color of the text (and the svg element through the currentColor property) based on the props boolean\n  color: ${props => props.isInput ? '#ffffff' : '#ffffff55'};\n`;\n\n// display the span elements side by side, in a heading stretching to occupy as much space as available\nconst InputTime = styled.h2`\n  flex-grow: 1;\n  display: flex;\n  font-size: 2rem;\n  font-weight: 500;\n`;\nconst InputSpan = styled.span`\n  flex-grow: 1;\n  width: 0;\n  margin: 0 0.75rem;\n  position: relative;\n\n  // add the short label for hours, minutes, seconds by accessing the suffix argument passed through props\n  &:after {\n    content: '${props => props.suffix}';\n    font-size: 0.8rem;\n    margin-left: 0.15rem;\n  }\n`;\n\nconst InputButton = styled.button`\n  width: 70px;\n  height: 50px;\n  padding: 0.3rem;\n`;\n\n// function formatting the time, to always show two digits (zero-padded values)\nfunction formatTime(time) {\n  return time >= 10 ? time : `0${time}`;\n}\n\n\nconst InputDisplay = ({ isInput, time, handleDialBack }) => {\n  // create three span elements out of the hours, minutes and seconds depicted in the time object\n  /* structured as follows\n  {\n    h,\n    m,\n    s\n  }\n  */\n  const InputPair = Object.entries(time);\n  const InputSpans = InputPair.map(pair => (\n    <InputSpan\n      key={pair[0]}\n      suffix={pair[0]}\n    >\n      {formatTime(pair[1])}\n    </InputSpan>\n  )\n  );\n\n  return (\n    <Input\n      isInput={isInput}\n    >\n      <InputTime>\n        {\n          InputSpans\n        }\n      </InputTime>\n\n      {/* draw the style button with path elements */}\n      <InputButton\n        onClick={handleDialBack}\n      >\n        <svg\n          viewBox=\"0 0 100 100\"\n        >\n          <path\n            d=\"M 50 37.5 l 25 25\"\n            strokeWidth=\"5px\"\n            stroke=\"currentColor\"\n            fill=\"none\"\n          />\n\n          <path\n            d=\"M 50 62.5 l 25 -25\"\n            strokeWidth=\"5px\"\n            stroke=\"currentColor\"\n            fill=\"none\"\n          />\n\n          <path\n            d=\"M 40 20 h 50 v 60 h -50 l -20 -30 Z\"\n            strokeWidth=\"5px\"\n            stroke=\"currentColor\"\n            fill=\"none\" />\n        </svg>\n      </InputButton>\n    </Input>\n  )\n};\n\n\n\n\n// in the dial show the digits from 0 to 9, in a grid\nconst Dial = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  width: 85%;\n  grid-gap: 1.8rem 1rem;\n\tmargin-bottom: 1.25rem;\n`;\n\n// for the digits, these are included through buttons styled to change their appearance on hover/focus\nconst Digit = styled.button`\n  font-size: 2rem;\n  transition: all 0.2s ease-out;\n  font-weight: 600;\n  position: relative;\n  color: #ffffff55;\n\t// for the focus and active state substitute the default outline highlighting the button through a fully opaque color and a pseudo element\n\toutline: none;\n  // push the first digit, 0, to the very bottom of the timer\n  &:nth-of-type(1) {\n    grid-row: 4/5;\n    grid-column: 1/-1;\n  }\n  &:before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 50px;\n    height: 50px;\n    transform:  translate(-50%, -50%) scale(0);\n    background: #fff;\n    border-radius: 50%;\n  }\n  &:hover, &:focus {\n    color: #fff;\n  }\n  &:hover:before, &:focus:before {\n    transition: all 0.2s ease-out;\n    // transition occurring only as the mouse hovers in the element\n    transition-delay: 0.1s;\n    transform:  translate(-50%, -50%) scale(1);\n    opacity: 0;\n  }\n`;\n\nconst InputDial = ({ handleDial }) => {\n  // create an array of ten items, including the digits from 0 to 9 in the styled button\n  const Digits = [];\n  for (let i = 0; i < 10; i += 1) {\n    Digits.push(\n      <Digit\n        key={i}\n        onClick={handleDial}\n      >\n        {i}\n      </Digit>\n    );\n  }\n  return (\n    <Dial>\n      {\n        Digits\n      }\n    </Dial>\n  )\n};\n\n\n/*\ndiv displaying the contents of the two interfaces in a single column layout\nhorizontally centered\n*/\nconst InputContainer = styled.div`\n  max-width: 380px;\n  width: 90vw;\n  margin: 2rem auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1rem;\n`;\n\nconst TimerInput = ({ input, time, handleDial, handleDialBack, handleTimerStart }) => {\n  // render the display atop the dial and the button\n  return (\n    <Spring\n      from={{ opacity: 0, transform: 'translateY(-2.5rem)' }}\n      to={{ opacity: 1, transform: 'translateY(0)' }}\n    >\n      {\n        ({ opacity, transform }) => (\n\n          <InputContainer\n            style={{ opacity, transform }}>\n            {/* InputDisplay styled according to a boolea, which keeps track of the input's length\n      displaying the value described in the time object\n      removing the last included digit through the handleDialBack function\n       */}\n            <InputDisplay\n              isInput={input.length !== 0}\n              time={time}\n              handleDialBack={handleDialBack}\n            />\n\n\n            {/* InputDial simply collecting the value of the button pressed, through the handleDial function */}\n            <InputDial\n              handleDial={handleDial}\n            />\n\n            {/* show the button only if there is at least one digit in the display */}\n            {\n              input &&\n              // start the timer when clicking the button\n              <TimerButton onClick={handleTimerStart}>\n                <svg viewBox=\"0 0 100 100\">\n                  <path\n                    d=\"M 40 30 l 30 20 l -30 20 Z\"\n                    stroke=\"#eee\"\n                    strokeWidth=\"7px\"\n                    fill=\"currentColor\"\n                  />\n                </svg>\n              </TimerButton>\n\n            }\n          </InputContainer>\n        )\n      }\n    </Spring >\n  )\n};\n\n\n/*\ndiv displaying the contents of the two interfaces in a single column layout\nhorizontally centered\n*/\n\n// main component rendered through index.js\nexport class Timer extends Component {\n  constructor(props) {\n    super(props);\n    /* in the state specify the following\n    - input, keeping track of the digits included through the dial in a string\n    - time, keeping track of the number of hours, minutes and seconds in an object\n    - timeTotal, keeping track of the number of seconds specified through the time object\n    - total, to save the total number of seconds and use it to reset the timer to this value\n    - label, a string describing the text shown in the output\n    - isTimer, to show the input or output interface\n    - isPlaying, to toggle between play and pause in the output interface\n    - isLabel, to toggle the label component\n    */\n    this.state = {\n      input: '',\n      time: {\n        h: 0,\n        m: 0,\n        s: 0\n      },\n      timeTotal: 0,\n      total: 0,\n      label: 'Label',\n      isTimer: false,\n      isPlaying: false,\n      isLabel: false\n    };\n\n    // bind the functions to update the state and enable the timer's functionalities\n    this.handleDial = this.handleDial.bind(this);\n    this.handleDialBack = this.handleDialBack.bind(this);\n    this.handleTimerStart = this.handleTimerStart.bind(this);\n    this.handleTimerToggle = this.handleTimerToggle.bind(this);\n    this.handleTimerAdd = this.handleTimerAdd.bind(this);\n    this.handleTimerNew = this.handleTimerNew.bind(this);\n    this.handleTimerReset = this.handleTimerReset.bind(this);\n    this.handleTimerLabel = this.handleTimerLabel.bind(this);\n    this.handleTimerLabelInput = this.handleTimerLabelInput.bind(this);\n  }\n\n  // function updating time and TimeTotal, on the basis of the 6 letters top string\n  updateTime(input) {\n    // based on the input string, create a six-letter long string (adding 0 at the beginning)\n    const inputTime = input.padStart(6, 0);\n    // separate the hours, minutes and seconds\n    let h = parseInt(inputTime.substring(0, 2), 10);\n    let m = parseInt(inputTime.substring(2, 4), 10);\n    let s = parseInt(inputTime.substring(4));\n    // compute the total\n    const timeTotal = h * 60 * 60 + m * 60 + s;\n\n    const time = {\n      h,\n      m,\n      s\n    };\n\n    // update the object and the integer\n    this.setState({\n      time,\n      timeTotal,\n      total: timeTotal\n    })\n  }\n\n  // function handling a press on the dial's buttons\n  handleDial(e) {\n    // retrieve the button's text element (0-9 value)\n    const { textContent } = e.target;\n    // retrieve the input from the state\n    let { input } = this.state;\n    const { length } = input;\n    // if the button pressed is 0 and the input doesn't already have a value, preemptively exit the function\n    if (textContent === '0' && length === 0) {\n      return;\n    }\n    // if the input is less than 6 characters long (hhmmss), add the digit to the input string and update the state\n    if (length < 6) {\n      input += textContent;\n      this.setState({\n        input\n      })\n      // update the time and timeTotal\n      this.updateTime(input);\n    }\n  }\n\n  // function handling a press on the dial's back button\n  handleDialBack(e) {\n    // retrieve the input from the state\n    let { input } = this.state;\n    const { length } = input;\n    // if input has at least a character, remove the last digit\n    if (length > 0) {\n      input = input.substring(0, length - 1);\n      // update the state\n      this.setState({\n        input\n      })\n    }\n    // update the time and timeToal\n    this.updateTime(input);\n  }\n\n\n  // function starting the timer\n  startTimer() {\n    // start a timer from timeTotal, decreasing its value one second at a time\n    this.intervalID = setInterval(() => {\n      let { timeTotal } = this.state;\n      timeTotal -= 1;\n      this.setState({\n        timeTotal: timeTotal\n      })\n      // when reaching 0, clear the interval\n      if (timeTotal === 0) {\n        clearInterval(this.intervalID);\n      }\n    }, 1000);\n  }\n\n  // function handling a press on the button starting the timer\n  handleTimerStart() {\n    // update the UI showing the output interface and the pause button\n    this.setState({\n      isTimer: true,\n      isPlaying: true\n    })\n    // start the timer\n    this.startTimer();\n  }\n\n  // function handling a press on the button pausing/starting the timer\n  handleTimerToggle() {\n    // based on the isPlaying boolean stop the interval or start it anew\n    const { isPlaying } = this.state;\n    if (isPlaying) {\n      clearInterval(this.intervalID);\n    }\n    else {\n      this.startTimer();\n    }\n    // update the UI of the button\n    this.setState({\n      isPlaying: !this.state.isPlaying\n    })\n  }\n\n  // function handling a press on the +1:00 button\n  handleTimerAdd() {\n    // add a minute to the total\n    const { timeTotal, total } = this.state;\n    this.setState({\n      timeTotal: timeTotal + 60,\n      total: total + 60\n    })\n  }\n\n  // function handling a press on the new timer button\n  handleTimerNew() {\n    // stop the ongoing interval, if there's one\n    clearInterval(this.intervalID);\n    // reset the input and update the state showing the input UI\n    const input = '';\n    this.setState({\n      isTimer: false,\n      input\n    })\n    // update the time with the now empty input\n    this.updateTime(input)\n  }\n\n  // function handling a press on the reset button\n  handleTimerReset() {\n    // stop the ongoing interval\n    clearInterval(this.intervalID);\n    // retrieve the input value\n    const { input } = this.state;\n\n    // update the timer with the old existing value and start the timer\n    this.updateTime(input);\n    this.handleTimerStart();\n  }\n\n  // function handling a press on the label text\n  handleTimerLabel() {\n    this.setState({\n      isLabel: true\n    })\n  }\n  // function handling input in the label component\n  handleTimerLabelInput(e) {\n    e.preventDefault();\n    // update the label with the input value\n    const { value: label } = e.target.querySelector('input');\n    if (label) {\n      this.setState({\n        label,\n        isLabel: false\n      })\n    }\n  }\n\n  render() {\n    // destructure the necessary information from the state\n    const { input, time, isTimer, isPlaying, timeTotal, total, label, isLabel } = this.state;\n\n    // based on the boolean show the input or output component\n    return (\n      <div>\n\n        {\n          isTimer ?\n\n\n            /* TimerOutput\n            displaying the countdown timer through **timeTotal**\n            showing the pause/play button according to **isPlaying**\n            handling functionalities such as pausing/starting the timer, adding a minute, resetting and finally removing the timer */\n            < TimerOutput\n              total={total}\n              timeTotal={timeTotal}\n              label={label}\n              isPlaying={isPlaying}\n              isLabel={isLabel}\n              handleTimerToggle={this.handleTimerToggle}\n              handleTimerNew={this.handleTimerNew}\n              handleTimerAdd={this.handleTimerAdd}\n              handleTimerReset={this.handleTimerReset}\n              handleTimerLabel={this.handleTimerLabel}\n              handleTimerLabelInput={this.handleTimerLabelInput}\n            />\n\n            :\n\n            /* TimerInput\n            adding the digits to **input**\n            displaying the digits as per **time**\n            handling functionalities such as adding digits, removing them, starting the timer */\n\n            <TimerInput\n              input={input}\n              time={time}\n              handleDial={this.handleDial}\n              handleDialBack={this.handleDialBack}\n              handleTimerStart={this.handleTimerStart}\n            />\n        }\n      </div>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}