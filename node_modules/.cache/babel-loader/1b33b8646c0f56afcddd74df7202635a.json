{"ast":null,"code":"/* eslint-disable no-continue */\nimport { isDate } from '../../context/TranslationContext';\nexport var processMessages = function (messages, lastRead, userID, hideDeletedMessages, disableDateSeparator, hideNewMessageSeparator) {\n  var _a, _b, _c;\n\n  var unread = false;\n  var lastDateSeparator;\n  var newMessages = [];\n\n  for (var i = 0, l = messages.length; i < l; i += 1) {\n    var message = messages[i];\n\n    if (hideDeletedMessages && message.type === 'deleted') {\n      continue;\n    }\n\n    var messageDate = message.created_at && isDate(message.created_at) && message.created_at.toDateString() || '';\n    var prevMessageDate = messageDate;\n    var previousMessage = messages[i - 1];\n\n    if (i > 0 && !disableDateSeparator && previousMessage.created_at && isDate(previousMessage.created_at)) {\n      prevMessageDate = previousMessage.created_at.toDateString();\n    }\n\n    if (!unread && !hideNewMessageSeparator) {\n      unread = lastRead && message.created_at && new Date(lastRead) < message.created_at || false; // do not show date separator for current user's messages\n\n      if (!disableDateSeparator && unread && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== userID) {\n        newMessages.push({\n          customType: 'message.date',\n          date: message.created_at,\n          id: message.id,\n          unread: unread\n        });\n      }\n    }\n\n    if (!disableDateSeparator && (i === 0 || messageDate !== prevMessageDate || hideDeletedMessages && ((_b = messages[i - 1]) === null || _b === void 0 ? void 0 : _b.type) === 'deleted' && lastDateSeparator !== messageDate) && ((_c = newMessages === null || newMessages === void 0 ? void 0 : newMessages[newMessages.length - 1]) === null || _c === void 0 ? void 0 : _c.customType) !== 'message.date' // do not show two date separators in a row\n    ) {\n        lastDateSeparator = messageDate;\n        newMessages.push({\n          customType: 'message.date',\n          date: message.created_at,\n          id: message.id\n        }, message);\n      } else {\n      newMessages.push(message);\n    }\n  }\n\n  return newMessages;\n}; // fast since it usually iterates just the last few messages\n\nexport var getLastReceived = function (messages) {\n  for (var i = messages.length - 1; i > 0; i -= 1) {\n    if (messages[i].status === 'received') {\n      return messages[i].id;\n    }\n  }\n\n  return null;\n};\nexport var getReadStates = function (messages, read) {\n  if (read === void 0) {\n    read = {};\n  } // create object with empty array for each message id\n\n\n  var readData = {};\n  Object.values(read).forEach(function (readState) {\n    if (!readState.last_read) return;\n    var userLastReadMsgId;\n    messages.forEach(function (msg) {\n      if (msg.updated_at && msg.updated_at < readState.last_read) {\n        userLastReadMsgId = msg.id;\n      }\n    });\n\n    if (userLastReadMsgId) {\n      if (!readData[userLastReadMsgId]) readData[userLastReadMsgId] = [];\n      readData[userLastReadMsgId].push(readState.user);\n    }\n  });\n  return readData;\n};\nexport var insertIntro = function (messages, headerPosition) {\n  var newMessages = messages;\n  var intro = {\n    customType: 'channel.intro'\n  }; // if no headerPosition is set, HeaderComponent will go at the top\n\n  if (!headerPosition) {\n    newMessages.unshift(intro);\n    return newMessages;\n  } // if no messages, intro gets inserted\n\n\n  if (!newMessages.length) {\n    newMessages.unshift(intro);\n    return newMessages;\n  } // else loop over the messages\n\n\n  for (var i = 0; i < messages.length; i += 1) {\n    var message = messages[i];\n    var messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;\n    var nextMessage = messages[i + 1];\n    var nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at) ? nextMessage.created_at.getTime() : null; // header position is smaller than message time so comes after;\n\n    if (messageTime && messageTime < headerPosition) {\n      // if header position is also smaller than message time continue;\n      if (nextMessageTime && nextMessageTime < headerPosition) {\n        if (messages[i + 1] && messages[i + 1].customType === 'message.date') continue;\n\n        if (!nextMessageTime) {\n          newMessages.push(intro);\n          return newMessages;\n        }\n\n        continue;\n      } else {\n        newMessages.splice(i + 1, 0, intro);\n        return newMessages;\n      }\n    }\n  }\n\n  return newMessages;\n};\nexport var getGroupStyles = function (message, previousMessage, nextMessage, noGroupByUser) {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  if (message.customType === 'message.date') return '';\n  if (message.customType === 'channel.intro') return '';\n  if (noGroupByUser || ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0) return 'single';\n  var isTopMessage = !previousMessage || previousMessage.customType === 'channel.intro' || previousMessage.customType === 'message.date' || previousMessage.type === 'system' || ((_b = previousMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) !== 0 || ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = previousMessage.user) === null || _d === void 0 ? void 0 : _d.id) || previousMessage.type === 'error' || previousMessage.deleted_at;\n  var isBottomMessage = !nextMessage || nextMessage.customType === 'message.date' || nextMessage.type === 'system' || nextMessage.customType === 'channel.intro' || ((_e = nextMessage.attachments) === null || _e === void 0 ? void 0 : _e.length) !== 0 || ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_g = nextMessage.user) === null || _g === void 0 ? void 0 : _g.id) || nextMessage.type === 'error' || nextMessage.deleted_at;\n\n  if (!isTopMessage && !isBottomMessage) {\n    if (message.deleted_at || message.type === 'error') return 'single';\n    return 'middle';\n  }\n\n  if (isBottomMessage) {\n    if (isTopMessage || message.deleted_at || message.type === 'error') return 'single';\n    return 'bottom';\n  }\n\n  if (isTopMessage) return 'top';\n  return '';\n};","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/node_modules/stream-chat-react/dist/components/MessageList/utils.js"],"names":["isDate","processMessages","messages","lastRead","userID","hideDeletedMessages","disableDateSeparator","hideNewMessageSeparator","_a","_b","_c","unread","lastDateSeparator","newMessages","i","l","length","message","type","messageDate","created_at","toDateString","prevMessageDate","previousMessage","Date","user","id","push","customType","date","getLastReceived","status","getReadStates","read","readData","Object","values","forEach","readState","last_read","userLastReadMsgId","msg","updated_at","insertIntro","headerPosition","intro","unshift","messageTime","getTime","nextMessage","nextMessageTime","splice","getGroupStyles","noGroupByUser","_d","_e","_f","_g","attachments","isTopMessage","deleted_at","isBottomMessage"],"mappings":"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","sourcesContent":["/* eslint-disable no-continue */\nimport { isDate } from '../../context/TranslationContext';\nexport var processMessages = function (messages, lastRead, userID, hideDeletedMessages, disableDateSeparator, hideNewMessageSeparator) {\n    var _a, _b, _c;\n    var unread = false;\n    var lastDateSeparator;\n    var newMessages = [];\n    for (var i = 0, l = messages.length; i < l; i += 1) {\n        var message = messages[i];\n        if (hideDeletedMessages && message.type === 'deleted') {\n            continue;\n        }\n        var messageDate = (message.created_at && isDate(message.created_at) && message.created_at.toDateString()) || '';\n        var prevMessageDate = messageDate;\n        var previousMessage = messages[i - 1];\n        if (i > 0 &&\n            !disableDateSeparator &&\n            previousMessage.created_at &&\n            isDate(previousMessage.created_at)) {\n            prevMessageDate = previousMessage.created_at.toDateString();\n        }\n        if (!unread && !hideNewMessageSeparator) {\n            unread = (lastRead && message.created_at && new Date(lastRead) < message.created_at) || false;\n            // do not show date separator for current user's messages\n            if (!disableDateSeparator && unread && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== userID) {\n                newMessages.push({\n                    customType: 'message.date',\n                    date: message.created_at,\n                    id: message.id,\n                    unread: unread,\n                });\n            }\n        }\n        if (!disableDateSeparator &&\n            (i === 0 ||\n                messageDate !== prevMessageDate ||\n                (hideDeletedMessages &&\n                    ((_b = messages[i - 1]) === null || _b === void 0 ? void 0 : _b.type) === 'deleted' &&\n                    lastDateSeparator !== messageDate)) &&\n            ((_c = newMessages === null || newMessages === void 0 ? void 0 : newMessages[newMessages.length - 1]) === null || _c === void 0 ? void 0 : _c.customType) !== 'message.date' // do not show two date separators in a row\n        ) {\n            lastDateSeparator = messageDate;\n            newMessages.push({\n                customType: 'message.date',\n                date: message.created_at,\n                id: message.id,\n            }, message);\n        }\n        else {\n            newMessages.push(message);\n        }\n    }\n    return newMessages;\n};\n// fast since it usually iterates just the last few messages\nexport var getLastReceived = function (messages) {\n    for (var i = messages.length - 1; i > 0; i -= 1) {\n        if (messages[i].status === 'received') {\n            return messages[i].id;\n        }\n    }\n    return null;\n};\nexport var getReadStates = function (messages, read) {\n    if (read === void 0) { read = {}; }\n    // create object with empty array for each message id\n    var readData = {};\n    Object.values(read).forEach(function (readState) {\n        if (!readState.last_read)\n            return;\n        var userLastReadMsgId;\n        messages.forEach(function (msg) {\n            if (msg.updated_at && msg.updated_at < readState.last_read) {\n                userLastReadMsgId = msg.id;\n            }\n        });\n        if (userLastReadMsgId) {\n            if (!readData[userLastReadMsgId])\n                readData[userLastReadMsgId] = [];\n            readData[userLastReadMsgId].push(readState.user);\n        }\n    });\n    return readData;\n};\nexport var insertIntro = function (messages, headerPosition) {\n    var newMessages = messages;\n    var intro = { customType: 'channel.intro' };\n    // if no headerPosition is set, HeaderComponent will go at the top\n    if (!headerPosition) {\n        newMessages.unshift(intro);\n        return newMessages;\n    }\n    // if no messages, intro gets inserted\n    if (!newMessages.length) {\n        newMessages.unshift(intro);\n        return newMessages;\n    }\n    // else loop over the messages\n    for (var i = 0; i < messages.length; i += 1) {\n        var message = messages[i];\n        var messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;\n        var nextMessage = messages[i + 1];\n        var nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at)\n            ? nextMessage.created_at.getTime()\n            : null;\n        // header position is smaller than message time so comes after;\n        if (messageTime && messageTime < headerPosition) {\n            // if header position is also smaller than message time continue;\n            if (nextMessageTime && nextMessageTime < headerPosition) {\n                if (messages[i + 1] && messages[i + 1].customType === 'message.date')\n                    continue;\n                if (!nextMessageTime) {\n                    newMessages.push(intro);\n                    return newMessages;\n                }\n                continue;\n            }\n            else {\n                newMessages.splice(i + 1, 0, intro);\n                return newMessages;\n            }\n        }\n    }\n    return newMessages;\n};\nexport var getGroupStyles = function (message, previousMessage, nextMessage, noGroupByUser) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (message.customType === 'message.date')\n        return '';\n    if (message.customType === 'channel.intro')\n        return '';\n    if (noGroupByUser || ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0)\n        return 'single';\n    var isTopMessage = !previousMessage ||\n        previousMessage.customType === 'channel.intro' ||\n        previousMessage.customType === 'message.date' ||\n        previousMessage.type === 'system' ||\n        ((_b = previousMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) !== 0 ||\n        ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = previousMessage.user) === null || _d === void 0 ? void 0 : _d.id) ||\n        previousMessage.type === 'error' ||\n        previousMessage.deleted_at;\n    var isBottomMessage = !nextMessage ||\n        nextMessage.customType === 'message.date' ||\n        nextMessage.type === 'system' ||\n        nextMessage.customType === 'channel.intro' ||\n        ((_e = nextMessage.attachments) === null || _e === void 0 ? void 0 : _e.length) !== 0 ||\n        ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_g = nextMessage.user) === null || _g === void 0 ? void 0 : _g.id) ||\n        nextMessage.type === 'error' ||\n        nextMessage.deleted_at;\n    if (!isTopMessage && !isBottomMessage) {\n        if (message.deleted_at || message.type === 'error')\n            return 'single';\n        return 'middle';\n    }\n    if (isBottomMessage) {\n        if (isTopMessage || message.deleted_at || message.type === 'error')\n            return 'single';\n        return 'bottom';\n    }\n    if (isTopMessage)\n        return 'top';\n    return '';\n};\n"]},"metadata":{},"sourceType":"module"}