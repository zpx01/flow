{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { AutoCompleteTextarea } from '../AutoCompleteTextarea';\nimport { LoadingIndicator } from '../Loading/LoadingIndicator';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useComponentContext } from '../../context/ComponentContext';\n\nvar UnMemoizedChatAutoComplete = function (props) {\n  var _a = useComponentContext(),\n      SuggestionItem = _a.AutocompleteSuggestionItem,\n      SuggestionList = _a.AutocompleteSuggestionList;\n\n  var t = useTranslationContext().t;\n  var messageInput = useMessageInputContext();\n  var cooldownRemaining = messageInput.cooldownRemaining,\n      disabled = messageInput.disabled,\n      emojiIndex = messageInput.emojiIndex,\n      innerRef = messageInput.textareaRef;\n  var placeholder = props.placeholder || t('Type your message');\n\n  var emojiReplace = function (word) {\n    var found = (emojiIndex === null || emojiIndex === void 0 ? void 0 : emojiIndex.search(word)) || [];\n    var emoji = found.filter(Boolean).slice(0, 10).find(function (_a) {\n      var emoticons = _a.emoticons;\n      return !!(emoticons === null || emoticons === void 0 ? void 0 : emoticons.includes(word));\n    });\n    if (!emoji || !('native' in emoji)) return null;\n    return emoji.native;\n  };\n\n  var updateInnerRef = useCallback(function (ref) {\n    if (innerRef) {\n      innerRef.current = ref;\n    }\n  }, [innerRef]);\n  return React.createElement(AutoCompleteTextarea, {\n    additionalTextareaProps: messageInput.additionalTextareaProps,\n    className: 'str-chat__textarea__textarea',\n    containerClassName: 'str-chat__textarea',\n    disabled: disabled || !!cooldownRemaining,\n    disableMentions: messageInput.disableMentions,\n    dropdownClassName: 'str-chat__emojisearch',\n    grow: messageInput.grow,\n    handleSubmit: props.handleSubmit || messageInput.handleSubmit,\n    innerRef: updateInnerRef,\n    itemClassName: 'str-chat__emojisearch__item',\n    keycodeSubmitKeys: messageInput.keycodeSubmitKeys,\n    listClassName: 'str-chat__emojisearch__list',\n    loadingComponent: LoadingIndicator,\n    maxRows: messageInput.maxRows,\n    minChar: 0,\n    onChange: props.onChange || messageInput.handleChange,\n    onFocus: props.onFocus,\n    onPaste: props.onPaste || messageInput.onPaste,\n    placeholder: cooldownRemaining ? t('Slow Mode ON') : placeholder,\n    replaceWord: emojiReplace,\n    rows: props.rows || 1,\n    SuggestionItem: SuggestionItem,\n    SuggestionList: SuggestionList,\n    trigger: messageInput.autocompleteTriggers || {},\n    value: props.value || messageInput.text\n  });\n};\n\nexport var ChatAutoComplete = React.memo(UnMemoizedChatAutoComplete);","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/node_modules/stream-chat-react/dist/components/ChatAutoComplete/ChatAutoComplete.js"],"names":["React","useCallback","AutoCompleteTextarea","LoadingIndicator","useMessageInputContext","useTranslationContext","useComponentContext","UnMemoizedChatAutoComplete","props","_a","SuggestionItem","AutocompleteSuggestionItem","SuggestionList","AutocompleteSuggestionList","t","messageInput","cooldownRemaining","disabled","emojiIndex","innerRef","textareaRef","placeholder","emojiReplace","word","found","search","emoji","filter","Boolean","slice","find","emoticons","includes","native","updateInnerRef","ref","current","createElement","additionalTextareaProps","className","containerClassName","disableMentions","dropdownClassName","grow","handleSubmit","itemClassName","keycodeSubmitKeys","listClassName","loadingComponent","maxRows","minChar","onChange","handleChange","onFocus","onPaste","replaceWord","rows","trigger","autocompleteTriggers","value","text","ChatAutoComplete","memo"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { AutoCompleteTextarea } from '../AutoCompleteTextarea';\nimport { LoadingIndicator } from '../Loading/LoadingIndicator';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nvar UnMemoizedChatAutoComplete = function (props) {\n    var _a = useComponentContext(), SuggestionItem = _a.AutocompleteSuggestionItem, SuggestionList = _a.AutocompleteSuggestionList;\n    var t = useTranslationContext().t;\n    var messageInput = useMessageInputContext();\n    var cooldownRemaining = messageInput.cooldownRemaining, disabled = messageInput.disabled, emojiIndex = messageInput.emojiIndex, innerRef = messageInput.textareaRef;\n    var placeholder = props.placeholder || t('Type your message');\n    var emojiReplace = function (word) {\n        var found = (emojiIndex === null || emojiIndex === void 0 ? void 0 : emojiIndex.search(word)) || [];\n        var emoji = found\n            .filter(Boolean)\n            .slice(0, 10)\n            .find(function (_a) {\n            var emoticons = _a.emoticons;\n            return !!(emoticons === null || emoticons === void 0 ? void 0 : emoticons.includes(word));\n        });\n        if (!emoji || !('native' in emoji))\n            return null;\n        return emoji.native;\n    };\n    var updateInnerRef = useCallback(function (ref) {\n        if (innerRef) {\n            innerRef.current = ref;\n        }\n    }, [innerRef]);\n    return (React.createElement(AutoCompleteTextarea, { additionalTextareaProps: messageInput.additionalTextareaProps, className: 'str-chat__textarea__textarea', containerClassName: 'str-chat__textarea', disabled: disabled || !!cooldownRemaining, disableMentions: messageInput.disableMentions, dropdownClassName: 'str-chat__emojisearch', grow: messageInput.grow, handleSubmit: props.handleSubmit || messageInput.handleSubmit, innerRef: updateInnerRef, itemClassName: 'str-chat__emojisearch__item', keycodeSubmitKeys: messageInput.keycodeSubmitKeys, listClassName: 'str-chat__emojisearch__list', loadingComponent: LoadingIndicator, maxRows: messageInput.maxRows, minChar: 0, onChange: props.onChange || messageInput.handleChange, onFocus: props.onFocus, onPaste: props.onPaste || messageInput.onPaste, placeholder: cooldownRemaining ? t('Slow Mode ON') : placeholder, replaceWord: emojiReplace, rows: props.rows || 1, SuggestionItem: SuggestionItem, SuggestionList: SuggestionList, trigger: messageInput.autocompleteTriggers || {}, value: props.value || messageInput.text }));\n};\nexport var ChatAutoComplete = React.memo(UnMemoizedChatAutoComplete);\n"]},"metadata":{},"sourceType":"module"}