{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useContext } from 'react';\nexport var TypingContext = React.createContext({});\nexport var TypingProvider = function (_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(TypingContext.Provider, {\n    value: value\n  }, children);\n};\nexport var useTypingContext = function () {\n  return useContext(TypingContext);\n};\n/**\n * Typescript currently does not support partial inference, so if TypingContext\n * typing is desired while using the HOC withTypingContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\n\nexport var withTypingContext = function (Component) {\n  var WithTypingContextComponent = function (props) {\n    var typingContext = useTypingContext();\n    return React.createElement(Component, __assign({}, props, typingContext));\n  };\n\n  WithTypingContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithTypingContextComponent;\n};","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/node_modules/stream-chat-react/dist/context/TypingContext.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useContext","TypingContext","createContext","TypingProvider","_a","children","value","createElement","Provider","useTypingContext","withTypingContext","Component","WithTypingContextComponent","props","typingContext","displayName","name","replace"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAOO,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAO,IAAIC,aAAa,GAAGF,KAAK,CAACG,aAAN,CAAoB,EAApB,CAApB;AACP,OAAO,IAAIC,cAAc,GAAG,UAAUC,EAAV,EAAc;AACtC,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,KAAK,GAAGF,EAAE,CAACE,KAAvC;AACA,SAAQP,KAAK,CAACQ,aAAN,CAAoBN,aAAa,CAACO,QAAlC,EAA4C;AAAEF,IAAAA,KAAK,EAAEA;AAAT,GAA5C,EAA8DD,QAA9D,CAAR;AACH,CAHM;AAIP,OAAO,IAAII,gBAAgB,GAAG,YAAY;AAAE,SAAOT,UAAU,CAACC,aAAD,CAAjB;AAAmC,CAAxE;AACP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIS,iBAAiB,GAAG,UAAUC,SAAV,EAAqB;AAChD,MAAIC,0BAA0B,GAAG,UAAUC,KAAV,EAAiB;AAC9C,QAAIC,aAAa,GAAGL,gBAAgB,EAApC;AACA,WAAOV,KAAK,CAACQ,aAAN,CAAoBI,SAApB,EAA+B1B,QAAQ,CAAC,EAAD,EAAK4B,KAAL,EAAYC,aAAZ,CAAvC,CAAP;AACH,GAHD;;AAIAF,EAAAA,0BAA0B,CAACG,WAA3B,GAAyC,CAACJ,SAAS,CAACI,WAAV,IACtCJ,SAAS,CAACK,IAD4B,IAEtC,WAFqC,EAExBC,OAFwB,CAEhB,MAFgB,EAER,EAFQ,CAAzC;AAGA,SAAOL,0BAAP;AACH,CATM","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\nexport var TypingContext = React.createContext({});\nexport var TypingProvider = function (_a) {\n    var children = _a.children, value = _a.value;\n    return (React.createElement(TypingContext.Provider, { value: value }, children));\n};\nexport var useTypingContext = function () { return useContext(TypingContext); };\n/**\n * Typescript currently does not support partial inference, so if TypingContext\n * typing is desired while using the HOC withTypingContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withTypingContext = function (Component) {\n    var WithTypingContextComponent = function (props) {\n        var typingContext = useTypingContext();\n        return React.createElement(Component, __assign({}, props, typingContext));\n    };\n    WithTypingContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithTypingContextComponent;\n};\n"]},"metadata":{},"sourceType":"module"}