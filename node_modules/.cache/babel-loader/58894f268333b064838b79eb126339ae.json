{"ast":null,"code":"import _classCallCheck from\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _taggedTemplateLiteral from\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject10,_templateObject11,_templateObject12,_templateObject13;import\"./timer.css\";import{Component}from\"react\";import{Spring}from\"react-spring\";import styled from\"styled-components\";import React from\"react\";import{Text}from\"@chakra-ui/react\";// create a form with a simple structure\n// absolute positioned in the center of the screen\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Label=styled.form(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  position: absolute;\\n  left: 50%;\\n  top: 25%;\\n  transform: translate(-50%, -50%);\\n  padding: 1.2rem 0.8rem;\\n  box-shadow: 0 0 0 2px #0088ff;\\n  background: #03031b;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: flex-start;\\n  line-height: 2;\\n\"])));var LabelText=styled.label(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  color: #fff;\\n  font-size: 0.7rem;\\n  margin: 0.25rem 0;\\n\"])));var LabelInput=styled.input(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  background: none;\\n  border: none;\\n  border-left: 2px solid #0088ff;\\n  border-radius: 1px;\\n  font-family: inherit;\\n  font-size: 0.9rem;\\n  font-weight: 300;\\n  padding: 0.25rem 0.75rem;\\n  color: #fff;\\n\"])));var OutputLabel=function OutputLabel(_ref){var label=_ref.label,handleTimerLabelInput=_ref.handleTimerLabelInput;return/*#__PURE__*/_jsxs(Label,{onSubmit:handleTimerLabelInput,children:[/*#__PURE__*/_jsx(LabelText,{children:\"Timer's Label\"}),/*#__PURE__*/_jsx(LabelInput,{type:\"text\",placeholder:label})]});};// show the countdown timer through an SVG element, displaying the countdown in a text element\n// wrap the text in a path element, animated to display the theme color as the timer progresses\nvar OutputDisplay=function OutputDisplay(_ref2){var total=_ref2.total,timeTotal=_ref2.timeTotal,label=_ref2.label,isLabel=_ref2.isLabel,handleTimerLabel=_ref2.handleTimerLabel,handleTimerLabelInput=_ref2.handleTimerLabelInput;// create the number of seconds, minutes and hours from timeTotal\nvar s=timeTotal;var m=0;var h=0;while(s>=60){s-=60;m+=1;}while(m>=60){m-=60;h+=1;}// show the hours, minutes, seconds one after the other\n// using the unchanged value representing the total time, describe the amount of time only necessary\n// meaning, if the total is less than an hout, don't show the hour's label\nvar time={};if(total>=3600){time.h=h;}if(total>=60){time.m=m;}time.s=s;// detail the entries of the time object\nvar timeValues=Object.entries(time);// create a text element for each array displaying the label and amount of time\nvar Text=timeValues.map(function(entry,index){// with 3 items, show them at 25, 50, 75%\n// with 2, at 33, 66%\nvar position=90/(timeValues.length+1)*(index+1);return/*#__PURE__*/_jsxs(\"text\",{x:position,y:\"50\",fill:\"#0088ff\",alignmentBaseline:\"middle\",textAnchor:\"middle\",fontWeight:\"bold\",fontSize:\"1rem\",children:[entry[1],/*#__PURE__*/_jsx(\"tspan\",{fontSize:\"0.35rem\",alignmentBaseline:\"hanging\",children:entry[0]})]},entry[0]);});// to animate the path, its length is necessary to animate it into view\n// as the path describes a circle, the length is equal to the perimeter of the circle\nvar perimeter=43*2*3.14;// use a variable ranging between 0-1 to show the colored circle atop the white one\n// animating the strokeDashoffset property until it is equal to strokeDasharray\nvar progress=1-timeTotal/total;// use the same value for the circle element, to rotate it as the path is animated\n// 0-1 range --> 0-360 range\nvar transform=\"rotate(-\".concat(progress*360,\") translate(0 -43) rotate(\").concat(progress*360,\")\");return/*#__PURE__*/_jsxs(React.Fragment,{children:[isLabel&&/*#__PURE__*/_jsx(OutputLabel,{label:label,handleTimerLabelInput:handleTimerLabelInput}),/*#__PURE__*/_jsx(\"svg\",{viewBox:\"0 0 100 100\",width:\"70%\",children:/*#__PURE__*/_jsxs(\"g\",{transform:\"translate(5 5)\",children:[/*#__PURE__*/_jsx(\"path\",{d:\"M 45 2 a 43 43 0 0 0 0 86 a 43 43 0 0 0 0 -86\",stroke:\"#fff\",strokeWidth:\"2\",fill:\"none\",shapeRendering:\"geometricPrecision\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M 45 2 a 43 43 0 0 0 0 86 a 43 43 0 0 0 0 -86\",stroke:\"#0088ff\",strokeWidth:\"2\",strokeDasharray:perimeter,strokeDashoffset:perimeter-perimeter*progress,fill:\"none\",shapeRendering:\"geometricPrecision\"}),/*#__PURE__*/_jsx(\"circle\",{r:\"3.2\",cx:\"45\",cy:\"45\",fill:\"#0088ff\",transform:transform}),/*#__PURE__*/_jsx(\"text\",{x:\"45\",y:\"30\",fill:\"#fff\",alignmentBaseline:\"middle\",textAnchor:\"middle\",fontSize:\"0.35rem\",onClick:handleTimerLabel,children:label}),Text]})})]});};// fabricate the round button nesting the SVG for the start of the timer\nvar TimerButton=styled.button(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  width: 52px;\\n  height: 52px;\\n  border-radius: 50%;\\n  padding: 0.6rem;\\n  color: #0088ff;\\n  background: #0088ff;\\n  box-shadow: 0 1px 5px -2px #0088ff;\\n  &:hover {\\n    transition: box-shadow 0.2s ease-out;\\n    box-shadow: 0 1px 5px 0px #0088ff;\\n  }\\n\"])));/*\ndiv displaying the contents of the two interfaces in a single column layout\nhorizontally centered\n*/var OutputContainer=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  max-width: 380px;\\n  width: 90vw;\\n  margin: 2rem auto;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  padding: 1rem;\\n\"])));var OutputControls=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  margin-top: 3rem;\\n  display: grid;\\n  grid-column-gap: 2rem;\\n  grid-template-columns: repeat(3, 80px);\\n  align-items: center;\\n  justify-items: center;\\n\"])));var TimerOutput=function TimerOutput(_ref3){var total=_ref3.total,timeTotal=_ref3.timeTotal,label=_ref3.label,isLabel=_ref3.isLabel,isPlaying=_ref3.isPlaying,handleTimerToggle=_ref3.handleTimerToggle,handleTimerNew=_ref3.handleTimerNew,handleTimerAdd=_ref3.handleTimerAdd,handleTimerReset=_ref3.handleTimerReset,handleTimerLabel=_ref3.handleTimerLabel,handleTimerLabelInput=_ref3.handleTimerLabelInput;// render the display atop a series of buttons enabling the project's functionalities\nreturn/*#__PURE__*/_jsx(Spring,{from:{opacity:0,transform:\"translateY(2.5rem)\"},to:{opacity:1,transform:\"translateY(0)\"},children:function children(_ref4){var opacity=_ref4.opacity,transform=_ref4.transform;return/*#__PURE__*/_jsxs(OutputContainer,{style:{opacity:opacity,transform:transform},children:[/*#__PURE__*/_jsx(OutputDisplay,{total:total,timeTotal:timeTotal,label:label,isLabel:isLabel,handleTimerLabel:handleTimerLabel,handleTimerLabelInput:handleTimerLabelInput}),/*#__PURE__*/_jsxs(OutputControls,{children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleTimerNew,children:/*#__PURE__*/_jsx(Text,{color:\"white\",children:\"New Timer\"})}),/*#__PURE__*/_jsx(TimerButton,{onClick:handleTimerToggle,children:isPlaying?/*#__PURE__*/_jsxs(\"svg\",{viewBox:\"0 0 100 100\",children:[/*#__PURE__*/_jsx(\"rect\",{x:\"30\",y:\"30\",width:\"10\",height:\"40\",stroke:\"#eee\",strokeWidth:\"6px\",fill:\"currentColor\"}),/*#__PURE__*/_jsx(\"rect\",{x:\"60\",y:\"30\",width:\"10\",height:\"40\",stroke:\"#eee\",strokeWidth:\"6px\",fill:\"currentColor\"})]}):/*#__PURE__*/_jsx(\"svg\",{viewBox:\"0 0 100 100\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M 40 30 l 30 20 l -30 20 Z\",stroke:\"#eee\",strokeWidth:\"7px\",fill:\"currentColor\"})})}),isPlaying?/*#__PURE__*/_jsx(\"button\",{onClick:handleTimerAdd,children:/*#__PURE__*/_jsx(Text,{color:\"white\",children:\"Add +1:00\"})}):/*#__PURE__*/_jsx(\"button\",{onClick:handleTimerReset,children:/*#__PURE__*/_jsx(Text,{color:\"white\",children:\"Reset Timer\"})})]})]});}});};// display the time and the button removing the last digit side by side\nvar Input=styled.div(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  display: flex;\\n  align-items: center;\\n  padding: 0.5rem 0.75rem;\\n  margin-bottom: 1rem;\\n  border-bottom: 2px solid #ffffff11;\\n  transition: color 0.2s ease-out;\\n  // style the color of the text (and the svg element through the currentColor property) based on the props boolean\\n  color: \",\";\\n\"])),function(props){return props.isInput?\"#ffffff\":\"#ffffff55\";});// display the span elements side by side, in a heading stretching to occupy as much space as available\nvar InputTime=styled.h2(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n  flex-grow: 1;\\n  display: flex;\\n  font-size: 2rem;\\n  font-weight: 500;\\n\"])));var InputSpan=styled.span(_templateObject9||(_templateObject9=_taggedTemplateLiteral([\"\\n  flex-grow: 1;\\n  width: 0;\\n  margin: 0 0.75rem;\\n  position: relative;\\n\\n  // add the short label for hours, minutes, seconds by accessing the suffix argument passed through props\\n  &:after {\\n    content: \\\"\",\"\\\";\\n    font-size: 0.8rem;\\n    margin-left: 0.15rem;\\n  }\\n\"])),function(props){return props.suffix;});var InputButton=styled.button(_templateObject10||(_templateObject10=_taggedTemplateLiteral([\"\\n  width: 70px;\\n  height: 50px;\\n  padding: 0.3rem;\\n\"])));// function formatting the time, to always show two digits (zero-padded values)\nfunction formatTime(time){return time>=10?time:\"0\".concat(time);}var InputDisplay=function InputDisplay(_ref5){var isInput=_ref5.isInput,time=_ref5.time,handleDialBack=_ref5.handleDialBack;// create three span elements out of the hours, minutes and seconds depicted in the time object\n/* structured as follows\n  {\n    h,\n    m,\n    s\n  }\n  */var InputPair=Object.entries(time);var InputSpans=InputPair.map(function(pair){return/*#__PURE__*/_jsx(InputSpan,{suffix:pair[0],children:formatTime(pair[1])},pair[0]);});return/*#__PURE__*/_jsxs(Input,{isInput:isInput,children:[/*#__PURE__*/_jsx(InputTime,{children:InputSpans}),/*#__PURE__*/_jsx(InputButton,{onClick:handleDialBack,children:/*#__PURE__*/_jsxs(\"svg\",{viewBox:\"0 0 100 100\",children:[/*#__PURE__*/_jsx(\"path\",{d:\"M 50 37.5 l 25 25\",strokeWidth:\"5px\",stroke:\"currentColor\",fill:\"none\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M 50 62.5 l 25 -25\",strokeWidth:\"5px\",stroke:\"currentColor\",fill:\"none\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M 40 20 h 50 v 60 h -50 l -20 -30 Z\",strokeWidth:\"5px\",stroke:\"currentColor\",fill:\"none\"})]})})]});};// in the dial show the digits from 0 to 9, in a grid\nvar Dial=styled.div(_templateObject11||(_templateObject11=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: repeat(3, 1fr);\\n  width: 85%;\\n  grid-gap: 1.8rem 1rem;\\n  margin-bottom: 1.25rem;\\n\"])));// for the digits, these are included through buttons styled to change their appearance on hover/focus\nvar Digit=styled.button(_templateObject12||(_templateObject12=_taggedTemplateLiteral([\"\\n  font-size: 2rem;\\n  transition: all 0.2s ease-out;\\n  font-weight: 600;\\n  position: relative;\\n  color: #ffffff55;\\n  // for the focus and active state substitute the default outline highlighting the button through a fully opaque color and a pseudo element\\n  outline: none;\\n  // push the first digit, 0, to the very bottom of the timer\\n  &:nth-of-type(1) {\\n    grid-row: 4/5;\\n    grid-column: 1/-1;\\n  }\\n  &:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    top: 50%;\\n    left: 50%;\\n    width: 50px;\\n    height: 50px;\\n    transform: translate(-50%, -50%) scale(0);\\n    background: #fff;\\n    border-radius: 50%;\\n  }\\n  &:hover,\\n  &:focus {\\n    color: #fff;\\n  }\\n  &:hover:before,\\n  &:focus:before {\\n    transition: all 0.2s ease-out;\\n    // transition occurring only as the mouse hovers in the element\\n    transition-delay: 0.1s;\\n    transform: translate(-50%, -50%) scale(1);\\n    opacity: 0;\\n  }\\n\"])));var InputDial=function InputDial(_ref6){var handleDial=_ref6.handleDial;// create an array of ten items, including the digits from 0 to 9 in the styled button\nvar Digits=[];for(var i=0;i<10;i+=1){Digits.push(/*#__PURE__*/_jsx(Digit,{onClick:handleDial,children:i},i));}return/*#__PURE__*/_jsx(Dial,{children:Digits});};/*\ndiv displaying the contents of the two interfaces in a single column layout\nhorizontally centered\n*/var InputContainer=styled.div(_templateObject13||(_templateObject13=_taggedTemplateLiteral([\"\\n  max-width: 380px;\\n  width: 90vw;\\n  margin: 2rem auto;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  padding: 1rem;\\n\"])));var TimerInput=function TimerInput(_ref7){var input=_ref7.input,time=_ref7.time,handleDial=_ref7.handleDial,handleDialBack=_ref7.handleDialBack,handleTimerStart=_ref7.handleTimerStart;// render the display atop the dial and the button\nreturn/*#__PURE__*/_jsx(Spring,{from:{opacity:0,transform:\"translateY(-2.5rem)\"},to:{opacity:1,transform:\"translateY(0)\"},children:function children(_ref8){var opacity=_ref8.opacity,transform=_ref8.transform;return/*#__PURE__*/_jsxs(InputContainer,{style:{opacity:opacity,transform:transform},children:[/*#__PURE__*/_jsx(InputDisplay,{isInput:input.length!==0,time:time,handleDialBack:handleDialBack}),/*#__PURE__*/_jsx(InputDial,{handleDial:handleDial}),input&&/*#__PURE__*/ // start the timer when clicking the button\n_jsx(TimerButton,{onClick:handleTimerStart,children:/*#__PURE__*/_jsx(\"svg\",{viewBox:\"0 0 100 100\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M 40 30 l 30 20 l -30 20 Z\",stroke:\"#eee\",strokeWidth:\"7px\",fill:\"currentColor\"})})})]});}});};/*\ndiv displaying the contents of the two interfaces in a single column layout\nhorizontally centered\n*/ // main component rendered through index.js\nexport var Timer=/*#__PURE__*/function(_Component){_inherits(Timer,_Component);var _super=_createSuper(Timer);function Timer(props){var _this;_classCallCheck(this,Timer);_this=_super.call(this,props);/* in the state specify the following\n    - input, keeping track of the digits included through the dial in a string\n    - time, keeping track of the number of hours, minutes and seconds in an object\n    - timeTotal, keeping track of the number of seconds specified through the time object\n    - total, to save the total number of seconds and use it to reset the timer to this value\n    - label, a string describing the text shown in the output\n    - isTimer, to show the input or output interface\n    - isPlaying, to toggle between play and pause in the output interface\n    - isLabel, to toggle the label component\n    */_this.state={input:\"\",time:{h:0,m:0,s:0},timeTotal:0,total:0,label:\"Label\",isTimer:false,isPlaying:false,isLabel:false};// bind the functions to update the state and enable the timer's functionalities\n_this.handleDial=_this.handleDial.bind(_assertThisInitialized(_this));_this.handleDialBack=_this.handleDialBack.bind(_assertThisInitialized(_this));_this.handleTimerStart=_this.handleTimerStart.bind(_assertThisInitialized(_this));_this.handleTimerToggle=_this.handleTimerToggle.bind(_assertThisInitialized(_this));_this.handleTimerAdd=_this.handleTimerAdd.bind(_assertThisInitialized(_this));_this.handleTimerNew=_this.handleTimerNew.bind(_assertThisInitialized(_this));_this.handleTimerReset=_this.handleTimerReset.bind(_assertThisInitialized(_this));_this.handleTimerLabel=_this.handleTimerLabel.bind(_assertThisInitialized(_this));_this.handleTimerLabelInput=_this.handleTimerLabelInput.bind(_assertThisInitialized(_this));return _this;}// function updating time and TimeTotal, on the basis of the 6 letters top string\n_createClass(Timer,[{key:\"updateTime\",value:function updateTime(input){// based on the input string, create a six-letter long string (adding 0 at the beginning)\nvar inputTime=input.padStart(6,0);// separate the hours, minutes and seconds\nvar h=parseInt(inputTime.substring(0,2),10);var m=parseInt(inputTime.substring(2,4),10);var s=parseInt(inputTime.substring(4));// compute the total\nvar timeTotal=h*60*60+m*60+s;var time={h:h,m:m,s:s};// update the object and the integer\nthis.setState({time:time,timeTotal:timeTotal,total:timeTotal});}// function handling a press on the dial's buttons\n},{key:\"handleDial\",value:function handleDial(e){// retrieve the button's text element (0-9 value)\nvar textContent=e.target.textContent;// retrieve the input from the state\nvar input=this.state.input;var _input=input,length=_input.length;// if the button pressed is 0 and the input doesn't already have a value, preemptively exit the function\nif(textContent===\"0\"&&length===0){return;}// if the input is less than 6 characters long (hhmmss), add the digit to the input string and update the state\nif(length<6){input+=textContent;this.setState({input:input});// update the time and timeTotal\nthis.updateTime(input);}}// function handling a press on the dial's back button\n},{key:\"handleDialBack\",value:function handleDialBack(e){// retrieve the input from the state\nvar input=this.state.input;var _input2=input,length=_input2.length;// if input has at least a character, remove the last digit\nif(length>0){input=input.substring(0,length-1);// update the state\nthis.setState({input:input});}// update the time and timeToal\nthis.updateTime(input);}// function starting the timer\n},{key:\"startTimer\",value:function startTimer(){var _this2=this;// start a timer from timeTotal, decreasing its value one second at a time\nthis.intervalID=setInterval(function(){var timeTotal=_this2.state.timeTotal;timeTotal-=1;_this2.setState({timeTotal:timeTotal});// when reaching 0, clear the interval\nif(timeTotal===0){clearInterval(_this2.intervalID);}},1000);}// function handling a press on the button starting the timer\n},{key:\"handleTimerStart\",value:function handleTimerStart(){// update the UI showing the output interface and the pause button\nthis.setState({isTimer:true,isPlaying:true});// start the timer\nthis.startTimer();}// function handling a press on the button pausing/starting the timer\n},{key:\"handleTimerToggle\",value:function handleTimerToggle(){// based on the isPlaying boolean stop the interval or start it anew\nvar isPlaying=this.state.isPlaying;if(isPlaying){clearInterval(this.intervalID);}else{this.startTimer();}// update the UI of the button\nthis.setState({isPlaying:!this.state.isPlaying});}// function handling a press on the +1:00 button\n},{key:\"handleTimerAdd\",value:function handleTimerAdd(){// add a minute to the total\nvar _this$state=this.state,timeTotal=_this$state.timeTotal,total=_this$state.total;this.setState({timeTotal:timeTotal+60,total:total+60});}// function handling a press on the new timer button\n},{key:\"handleTimerNew\",value:function handleTimerNew(){// stop the ongoing interval, if there's one\nclearInterval(this.intervalID);// reset the input and update the state showing the input UI\nvar input=\"\";this.setState({isTimer:false,input:input});// update the time with the now empty input\nthis.updateTime(input);}// function handling a press on the reset button\n},{key:\"handleTimerReset\",value:function handleTimerReset(){// stop the ongoing interval\nclearInterval(this.intervalID);// retrieve the input value\nvar input=this.state.input;// update the timer with the old existing value and start the timer\nthis.updateTime(input);this.handleTimerStart();}// function handling a press on the label text\n},{key:\"handleTimerLabel\",value:function handleTimerLabel(){this.setState({isLabel:true});}// function handling input in the label component\n},{key:\"handleTimerLabelInput\",value:function handleTimerLabelInput(e){e.preventDefault();// update the label with the input value\nvar _e$target$querySelect=e.target.querySelector(\"input\"),label=_e$target$querySelect.value;if(label){this.setState({label:label,isLabel:false});}}},{key:\"render\",value:function render(){// destructure the necessary information from the state\nvar _this$state2=this.state,input=_this$state2.input,time=_this$state2.time,isTimer=_this$state2.isTimer,isPlaying=_this$state2.isPlaying,timeTotal=_this$state2.timeTotal,total=_this$state2.total,label=_this$state2.label,isLabel=_this$state2.isLabel;// based on the boolean show the input or output component\nreturn/*#__PURE__*/_jsx(\"div\",{children:isTimer?/*#__PURE__*/ /* TimerOutput\n            displaying the countdown timer through **timeTotal**\n            showing the pause/play button according to **isPlaying**\n            handling functionalities such as pausing/starting the timer, adding a minute, resetting and finally removing the timer */_jsx(\"div\",{className:\"body\",children:/*#__PURE__*/_jsx(TimerOutput,{total:total,timeTotal:timeTotal,label:label,isPlaying:isPlaying,isLabel:isLabel,handleTimerToggle:this.handleTimerToggle,handleTimerNew:this.handleTimerNew,handleTimerAdd:this.handleTimerAdd,handleTimerReset:this.handleTimerReset,handleTimerLabel:this.handleTimerLabel,handleTimerLabelInput:this.handleTimerLabelInput})}):/*#__PURE__*/ /* TimerInput\n            adding the digits to **input**\n            displaying the digits as per **time**\n            handling functionalities such as adding digits, removing them, starting the timer */_jsx(\"div\",{className:\"body\",children:/*#__PURE__*/_jsx(TimerInput,{input:input,time:time,handleDial:this.handleDial,handleDialBack:this.handleDialBack,handleTimerStart:this.handleTimerStart})})});}}]);return Timer;}(Component);","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/src/components/Timer.js"],"names":["Component","Spring","styled","React","Text","Label","form","LabelText","label","LabelInput","input","OutputLabel","handleTimerLabelInput","OutputDisplay","total","timeTotal","isLabel","handleTimerLabel","s","m","h","time","timeValues","Object","entries","map","entry","index","position","length","perimeter","progress","transform","TimerButton","button","OutputContainer","div","OutputControls","TimerOutput","isPlaying","handleTimerToggle","handleTimerNew","handleTimerAdd","handleTimerReset","opacity","Input","props","isInput","InputTime","h2","InputSpan","span","suffix","InputButton","formatTime","InputDisplay","handleDialBack","InputPair","InputSpans","pair","Dial","Digit","InputDial","handleDial","Digits","i","push","InputContainer","TimerInput","handleTimerStart","Timer","state","isTimer","bind","inputTime","padStart","parseInt","substring","setState","e","textContent","target","updateTime","intervalID","setInterval","clearInterval","startTimer","preventDefault","querySelector","value"],"mappings":"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","sourcesContent":["import \"./timer.css\";\nimport { Component } from \"react\";\nimport { Spring } from \"react-spring\";\nimport styled from \"styled-components\";\nimport React from \"react\";\nimport { Text } from \"@chakra-ui/react\"\n// create a form with a simple structure\n// absolute positioned in the center of the screen\nconst Label = styled.form`\n  position: absolute;\n  left: 50%;\n  top: 25%;\n  transform: translate(-50%, -50%);\n  padding: 1.2rem 0.8rem;\n  box-shadow: 0 0 0 2px #0088ff;\n  background: #03031b;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  line-height: 2;\n`;\nconst LabelText = styled.label`\n  color: #fff;\n  font-size: 0.7rem;\n  margin: 0.25rem 0;\n`;\n\nconst LabelInput = styled.input`\n  background: none;\n  border: none;\n  border-left: 2px solid #0088ff;\n  border-radius: 1px;\n  font-family: inherit;\n  font-size: 0.9rem;\n  font-weight: 300;\n  padding: 0.25rem 0.75rem;\n  color: #fff;\n`;\nconst OutputLabel = ({ label, handleTimerLabelInput }) => {\n  return (\n    <Label onSubmit={handleTimerLabelInput}>\n      <LabelText>Timer's Label</LabelText>\n      <LabelInput type=\"text\" placeholder={label} />\n    </Label>\n  );\n};\n\n// show the countdown timer through an SVG element, displaying the countdown in a text element\n// wrap the text in a path element, animated to display the theme color as the timer progresses\nconst OutputDisplay = ({\n  total,\n  timeTotal,\n  label,\n  isLabel,\n  handleTimerLabel,\n  handleTimerLabelInput,\n}) => {\n  // create the number of seconds, minutes and hours from timeTotal\n  let s = timeTotal;\n  let m = 0;\n  let h = 0;\n  while (s >= 60) {\n    s -= 60;\n    m += 1;\n  }\n\n  while (m >= 60) {\n    m -= 60;\n    h += 1;\n  }\n  // show the hours, minutes, seconds one after the other\n  // using the unchanged value representing the total time, describe the amount of time only necessary\n  // meaning, if the total is less than an hout, don't show the hour's label\n  const time = {};\n  if (total >= 3600) {\n    time.h = h;\n  }\n  if (total >= 60) {\n    time.m = m;\n  }\n  time.s = s;\n  // detail the entries of the time object\n  const timeValues = Object.entries(time);\n  // create a text element for each array displaying the label and amount of time\n  const Text = timeValues.map((entry, index) => {\n    // with 3 items, show them at 25, 50, 75%\n    // with 2, at 33, 66%\n    const position = (90 / (timeValues.length + 1)) * (index + 1);\n    return (\n      <text\n        x={position}\n        y=\"50\"\n        fill=\"#0088ff\"\n        alignmentBaseline=\"middle\"\n        textAnchor=\"middle\"\n        key={entry[0]}\n        fontWeight=\"bold\"\n        fontSize=\"1rem\"\n      >\n        {entry[1]}\n        <tspan fontSize=\"0.35rem\" alignmentBaseline=\"hanging\">\n          {entry[0]}\n        </tspan>\n      </text>\n    );\n  });\n\n  // to animate the path, its length is necessary to animate it into view\n  // as the path describes a circle, the length is equal to the perimeter of the circle\n  const perimeter = 43 * 2 * 3.14;\n\n  // use a variable ranging between 0-1 to show the colored circle atop the white one\n  // animating the strokeDashoffset property until it is equal to strokeDasharray\n  const progress = 1 - timeTotal / total;\n  // use the same value for the circle element, to rotate it as the path is animated\n  // 0-1 range --> 0-360 range\n  const transform = `rotate(-${progress * 360}) translate(0 -43) rotate(${\n    progress * 360\n  })`;\n\n  return (\n    <React.Fragment>\n      {/* aside from the output, display an additional element to change the label in the display\n        component toggled and absolute positioned atop the display\n      */}\n      {isLabel && (\n        <OutputLabel\n          label={label}\n          handleTimerLabelInput={handleTimerLabelInput}\n        />\n      )}\n      <svg viewBox=\"0 0 100 100\" width=\"70%\">\n        {/* group to center the elements in the svg, and avoid the circle from being cropped out */}\n        <g transform=\"translate(5 5)\">\n          {/* two overlapping path elements, showing the colored one atop the white one (the later an element is created, the higher its elevation, so to speak) */}\n          <path\n            d=\"M 45 2 a 43 43 0 0 0 0 86 a 43 43 0 0 0 0 -86\"\n            stroke=\"#fff\"\n            strokeWidth=\"2\"\n            fill=\"none\"\n            shapeRendering=\"geometricPrecision\"\n          />\n\n          <path\n            d=\"M 45 2 a 43 43 0 0 0 0 86 a 43 43 0 0 0 0 -86\"\n            stroke=\"#0088ff\"\n            strokeWidth=\"2\"\n            strokeDasharray={perimeter}\n            strokeDashoffset={perimeter - perimeter * progress}\n            fill=\"none\"\n            shapeRendering=\"geometricPrecision\"\n          />\n\n          {/* circle showing the progress */}\n          <circle\n            r=\"3.2\"\n            cx=\"45\"\n            cy=\"45\"\n            fill=\"#0088ff\"\n            transform={transform}\n          />\n\n          <text\n            x=\"45\"\n            y=\"30\"\n            fill=\"#fff\"\n            alignmentBaseline=\"middle\"\n            textAnchor=\"middle\"\n            fontSize=\"0.35rem\"\n            onClick={handleTimerLabel}\n          >\n            {label}\n          </text>\n          {Text}\n        </g>\n      </svg>\n    </React.Fragment>\n  );\n};\n\n// fabricate the round button nesting the SVG for the start of the timer\nconst TimerButton = styled.button`\n  width: 52px;\n  height: 52px;\n  border-radius: 50%;\n  padding: 0.6rem;\n  color: #0088ff;\n  background: #0088ff;\n  box-shadow: 0 1px 5px -2px #0088ff;\n  &:hover {\n    transition: box-shadow 0.2s ease-out;\n    box-shadow: 0 1px 5px 0px #0088ff;\n  }\n`;\n\n/*\ndiv displaying the contents of the two interfaces in a single column layout\nhorizontally centered\n*/\nconst OutputContainer = styled.div`\n  max-width: 380px;\n  width: 90vw;\n  margin: 2rem auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1rem;\n`;\n\nconst OutputControls = styled.div`\n  margin-top: 3rem;\n  display: grid;\n  grid-column-gap: 2rem;\n  grid-template-columns: repeat(3, 80px);\n  align-items: center;\n  justify-items: center;\n`;\n\nconst TimerOutput = ({\n  total,\n  timeTotal,\n  label,\n  isLabel,\n  isPlaying,\n  handleTimerToggle,\n  handleTimerNew,\n  handleTimerAdd,\n  handleTimerReset,\n  handleTimerLabel,\n  handleTimerLabelInput,\n}) => {\n  // render the display atop a series of buttons enabling the project's functionalities\n  return (\n    <Spring\n      from={{ opacity: 0, transform: \"translateY(2.5rem)\" }}\n      to={{ opacity: 1, transform: \"translateY(0)\" }}\n    >\n      {({ opacity, transform }) => (\n        <OutputContainer style={{ opacity, transform }}>\n          {/* display component using timeTotal, describing the time being counted down, and total, the unchanged total (to compute the relative progress) */}\n          <OutputDisplay\n            total={total}\n            timeTotal={timeTotal}\n            label={label}\n            isLabel={isLabel}\n            handleTimerLabel={handleTimerLabel}\n            handleTimerLabelInput={handleTimerLabelInput}\n          />\n\n          <OutputControls>\n            {/* button to go back to the input UI */}\n            <button onClick={handleTimerNew}><Text color=\"white\">New Timer</Text></button>\n\n            {/* button to toggle the timer  */}\n            <TimerButton onClick={handleTimerToggle}>\n              {isPlaying ? (\n                <svg viewBox=\"0 0 100 100\">\n                  <rect\n                    x=\"30\"\n                    y=\"30\"\n                    width=\"10\"\n                    height=\"40\"\n                    stroke=\"#eee\"\n                    strokeWidth=\"6px\"\n                    fill=\"currentColor\"\n                  />\n                  <rect\n                    x=\"60\"\n                    y=\"30\"\n                    width=\"10\"\n                    height=\"40\"\n                    stroke=\"#eee\"\n                    strokeWidth=\"6px\"\n                    fill=\"currentColor\"\n                  />\n                </svg>\n              ) : (\n                <svg viewBox=\"0 0 100 100\">\n                  <path\n                    d=\"M 40 30 l 30 20 l -30 20 Z\"\n                    stroke=\"#eee\"\n                    strokeWidth=\"7px\"\n                    fill=\"currentColor\"\n                  />\n                </svg>\n              )}\n            </TimerButton>\n\n            {/* button to either add 1 minute or reset the timer, based on whether the timer is paused */}\n            {isPlaying ? (\n              <button onClick={handleTimerAdd}><Text color=\"white\">Add +1:00</Text></button>\n            ) : (\n              <button onClick={handleTimerReset}><Text color=\"white\">Reset Timer</Text></button>\n            )}\n          </OutputControls>\n        </OutputContainer>\n      )}\n    </Spring>\n  );\n};\n\n// display the time and the button removing the last digit side by side\nconst Input = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 0.5rem 0.75rem;\n  margin-bottom: 1rem;\n  border-bottom: 2px solid #ffffff11;\n  transition: color 0.2s ease-out;\n  // style the color of the text (and the svg element through the currentColor property) based on the props boolean\n  color: ${(props) => (props.isInput ? \"#ffffff\" : \"#ffffff55\")};\n`;\n\n// display the span elements side by side, in a heading stretching to occupy as much space as available\nconst InputTime = styled.h2`\n  flex-grow: 1;\n  display: flex;\n  font-size: 2rem;\n  font-weight: 500;\n`;\nconst InputSpan = styled.span`\n  flex-grow: 1;\n  width: 0;\n  margin: 0 0.75rem;\n  position: relative;\n\n  // add the short label for hours, minutes, seconds by accessing the suffix argument passed through props\n  &:after {\n    content: \"${(props) => props.suffix}\";\n    font-size: 0.8rem;\n    margin-left: 0.15rem;\n  }\n`;\n\nconst InputButton = styled.button`\n  width: 70px;\n  height: 50px;\n  padding: 0.3rem;\n`;\n\n// function formatting the time, to always show two digits (zero-padded values)\nfunction formatTime(time) {\n  return time >= 10 ? time : `0${time}`;\n}\n\nconst InputDisplay = ({ isInput, time, handleDialBack }) => {\n  // create three span elements out of the hours, minutes and seconds depicted in the time object\n  /* structured as follows\n  {\n    h,\n    m,\n    s\n  }\n  */\n  const InputPair = Object.entries(time);\n  const InputSpans = InputPair.map((pair) => (\n    <InputSpan key={pair[0]} suffix={pair[0]}>\n      {formatTime(pair[1])}\n    </InputSpan>\n  ));\n\n  return (\n    <Input isInput={isInput}>\n      <InputTime>{InputSpans}</InputTime>\n\n      {/* draw the style button with path elements */}\n      <InputButton onClick={handleDialBack}>\n        <svg viewBox=\"0 0 100 100\">\n          <path\n            d=\"M 50 37.5 l 25 25\"\n            strokeWidth=\"5px\"\n            stroke=\"currentColor\"\n            fill=\"none\"\n          />\n\n          <path\n            d=\"M 50 62.5 l 25 -25\"\n            strokeWidth=\"5px\"\n            stroke=\"currentColor\"\n            fill=\"none\"\n          />\n\n          <path\n            d=\"M 40 20 h 50 v 60 h -50 l -20 -30 Z\"\n            strokeWidth=\"5px\"\n            stroke=\"currentColor\"\n            fill=\"none\"\n          />\n        </svg>\n      </InputButton>\n    </Input>\n  );\n};\n\n// in the dial show the digits from 0 to 9, in a grid\nconst Dial = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  width: 85%;\n  grid-gap: 1.8rem 1rem;\n  margin-bottom: 1.25rem;\n`;\n\n// for the digits, these are included through buttons styled to change their appearance on hover/focus\nconst Digit = styled.button`\n  font-size: 2rem;\n  transition: all 0.2s ease-out;\n  font-weight: 600;\n  position: relative;\n  color: #ffffff55;\n  // for the focus and active state substitute the default outline highlighting the button through a fully opaque color and a pseudo element\n  outline: none;\n  // push the first digit, 0, to the very bottom of the timer\n  &:nth-of-type(1) {\n    grid-row: 4/5;\n    grid-column: 1/-1;\n  }\n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 50px;\n    height: 50px;\n    transform: translate(-50%, -50%) scale(0);\n    background: #fff;\n    border-radius: 50%;\n  }\n  &:hover,\n  &:focus {\n    color: #fff;\n  }\n  &:hover:before,\n  &:focus:before {\n    transition: all 0.2s ease-out;\n    // transition occurring only as the mouse hovers in the element\n    transition-delay: 0.1s;\n    transform: translate(-50%, -50%) scale(1);\n    opacity: 0;\n  }\n`;\n\nconst InputDial = ({ handleDial }) => {\n  // create an array of ten items, including the digits from 0 to 9 in the styled button\n  const Digits = [];\n  for (let i = 0; i < 10; i += 1) {\n    Digits.push(\n      <Digit key={i} onClick={handleDial}>\n        {i}\n      </Digit>\n    );\n  }\n  return <Dial>{Digits}</Dial>;\n};\n\n/*\ndiv displaying the contents of the two interfaces in a single column layout\nhorizontally centered\n*/\nconst InputContainer = styled.div`\n  max-width: 380px;\n  width: 90vw;\n  margin: 2rem auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1rem;\n`;\n\nconst TimerInput = ({\n  input,\n  time,\n  handleDial,\n  handleDialBack,\n  handleTimerStart,\n}) => {\n  // render the display atop the dial and the button\n  return (\n    <Spring\n      from={{ opacity: 0, transform: \"translateY(-2.5rem)\" }}\n      to={{ opacity: 1, transform: \"translateY(0)\" }}\n    >\n      {({ opacity, transform }) => (\n        <InputContainer style={{ opacity, transform }}>\n          {/* InputDisplay styled according to a boolea, which keeps track of the input's length\n      displaying the value described in the time object\n      removing the last included digit through the handleDialBack function\n       */}\n          <InputDisplay\n            isInput={input.length !== 0}\n            time={time}\n            handleDialBack={handleDialBack}\n          />\n\n          {/* InputDial simply collecting the value of the button pressed, through the handleDial function */}\n          <InputDial handleDial={handleDial} />\n\n          {/* show the button only if there is at least one digit in the display */}\n          {input && (\n            // start the timer when clicking the button\n            <TimerButton onClick={handleTimerStart}>\n              <svg viewBox=\"0 0 100 100\">\n                <path\n                  d=\"M 40 30 l 30 20 l -30 20 Z\"\n                  stroke=\"#eee\"\n                  strokeWidth=\"7px\"\n                  fill=\"currentColor\"\n                />\n              </svg>\n            </TimerButton>\n          )}\n        </InputContainer>\n      )}\n    </Spring>\n  );\n};\n\n/*\ndiv displaying the contents of the two interfaces in a single column layout\nhorizontally centered\n*/\n\n// main component rendered through index.js\nexport class Timer extends Component {\n  constructor(props) {\n    super(props);\n    /* in the state specify the following\n    - input, keeping track of the digits included through the dial in a string\n    - time, keeping track of the number of hours, minutes and seconds in an object\n    - timeTotal, keeping track of the number of seconds specified through the time object\n    - total, to save the total number of seconds and use it to reset the timer to this value\n    - label, a string describing the text shown in the output\n    - isTimer, to show the input or output interface\n    - isPlaying, to toggle between play and pause in the output interface\n    - isLabel, to toggle the label component\n    */\n    this.state = {\n      input: \"\",\n      time: {\n        h: 0,\n        m: 0,\n        s: 0,\n      },\n      timeTotal: 0,\n      total: 0,\n      label: \"Label\",\n      isTimer: false,\n      isPlaying: false,\n      isLabel: false,\n    };\n\n    // bind the functions to update the state and enable the timer's functionalities\n    this.handleDial = this.handleDial.bind(this);\n    this.handleDialBack = this.handleDialBack.bind(this);\n    this.handleTimerStart = this.handleTimerStart.bind(this);\n    this.handleTimerToggle = this.handleTimerToggle.bind(this);\n    this.handleTimerAdd = this.handleTimerAdd.bind(this);\n    this.handleTimerNew = this.handleTimerNew.bind(this);\n    this.handleTimerReset = this.handleTimerReset.bind(this);\n    this.handleTimerLabel = this.handleTimerLabel.bind(this);\n    this.handleTimerLabelInput = this.handleTimerLabelInput.bind(this);\n  }\n\n  // function updating time and TimeTotal, on the basis of the 6 letters top string\n  updateTime(input) {\n    // based on the input string, create a six-letter long string (adding 0 at the beginning)\n    const inputTime = input.padStart(6, 0);\n    // separate the hours, minutes and seconds\n    let h = parseInt(inputTime.substring(0, 2), 10);\n    let m = parseInt(inputTime.substring(2, 4), 10);\n    let s = parseInt(inputTime.substring(4));\n    // compute the total\n    const timeTotal = h * 60 * 60 + m * 60 + s;\n\n    const time = {\n      h,\n      m,\n      s,\n    };\n\n    // update the object and the integer\n    this.setState({\n      time,\n      timeTotal,\n      total: timeTotal,\n    });\n  }\n\n  // function handling a press on the dial's buttons\n  handleDial(e) {\n    // retrieve the button's text element (0-9 value)\n    const { textContent } = e.target;\n    // retrieve the input from the state\n    let { input } = this.state;\n    const { length } = input;\n    // if the button pressed is 0 and the input doesn't already have a value, preemptively exit the function\n    if (textContent === \"0\" && length === 0) {\n      return;\n    }\n    // if the input is less than 6 characters long (hhmmss), add the digit to the input string and update the state\n    if (length < 6) {\n      input += textContent;\n      this.setState({\n        input,\n      });\n      // update the time and timeTotal\n      this.updateTime(input);\n    }\n  }\n\n  // function handling a press on the dial's back button\n  handleDialBack(e) {\n    // retrieve the input from the state\n    let { input } = this.state;\n    const { length } = input;\n    // if input has at least a character, remove the last digit\n    if (length > 0) {\n      input = input.substring(0, length - 1);\n      // update the state\n      this.setState({\n        input,\n      });\n    }\n    // update the time and timeToal\n    this.updateTime(input);\n  }\n\n  // function starting the timer\n  startTimer() {\n    // start a timer from timeTotal, decreasing its value one second at a time\n    this.intervalID = setInterval(() => {\n      let { timeTotal } = this.state;\n      timeTotal -= 1;\n      this.setState({\n        timeTotal: timeTotal,\n      });\n      // when reaching 0, clear the interval\n      if (timeTotal === 0) {\n        clearInterval(this.intervalID);\n      }\n    }, 1000);\n  }\n\n  // function handling a press on the button starting the timer\n  handleTimerStart() {\n    // update the UI showing the output interface and the pause button\n    this.setState({\n      isTimer: true,\n      isPlaying: true,\n    });\n    // start the timer\n    this.startTimer();\n  }\n\n  // function handling a press on the button pausing/starting the timer\n  handleTimerToggle() {\n    // based on the isPlaying boolean stop the interval or start it anew\n    const { isPlaying } = this.state;\n    if (isPlaying) {\n      clearInterval(this.intervalID);\n    } else {\n      this.startTimer();\n    }\n    // update the UI of the button\n    this.setState({\n      isPlaying: !this.state.isPlaying,\n    });\n  }\n\n  // function handling a press on the +1:00 button\n  handleTimerAdd() {\n    // add a minute to the total\n    const { timeTotal, total } = this.state;\n    this.setState({\n      timeTotal: timeTotal + 60,\n      total: total + 60,\n    });\n  }\n\n  // function handling a press on the new timer button\n  handleTimerNew() {\n    // stop the ongoing interval, if there's one\n    clearInterval(this.intervalID);\n    // reset the input and update the state showing the input UI\n    const input = \"\";\n    this.setState({\n      isTimer: false,\n      input,\n    });\n    // update the time with the now empty input\n    this.updateTime(input);\n  }\n\n  // function handling a press on the reset button\n  handleTimerReset() {\n    // stop the ongoing interval\n    clearInterval(this.intervalID);\n    // retrieve the input value\n    const { input } = this.state;\n\n    // update the timer with the old existing value and start the timer\n    this.updateTime(input);\n    this.handleTimerStart();\n  }\n\n  // function handling a press on the label text\n  handleTimerLabel() {\n    this.setState({\n      isLabel: true,\n    });\n  }\n  // function handling input in the label component\n  handleTimerLabelInput(e) {\n    e.preventDefault();\n    // update the label with the input value\n    const { value: label } = e.target.querySelector(\"input\");\n    if (label) {\n      this.setState({\n        label,\n        isLabel: false,\n      });\n    }\n  }\n\n  render() {\n    // destructure the necessary information from the state\n    const {\n      input,\n      time,\n      isTimer,\n      isPlaying,\n      timeTotal,\n      total,\n      label,\n      isLabel,\n    } = this.state;\n\n    // based on the boolean show the input or output component\n    return (\n      <div>\n        {isTimer ? (\n          /* TimerOutput\n            displaying the countdown timer through **timeTotal**\n            showing the pause/play button according to **isPlaying**\n            handling functionalities such as pausing/starting the timer, adding a minute, resetting and finally removing the timer */\n          <div className=\"body\">\n            <TimerOutput\n              total={total}\n              timeTotal={timeTotal}\n              label={label}\n              isPlaying={isPlaying}\n              isLabel={isLabel}\n              handleTimerToggle={this.handleTimerToggle}\n              handleTimerNew={this.handleTimerNew}\n              handleTimerAdd={this.handleTimerAdd}\n              handleTimerReset={this.handleTimerReset}\n              handleTimerLabel={this.handleTimerLabel}\n              handleTimerLabelInput={this.handleTimerLabelInput}\n            />\n          </div>\n        ) : (\n          /* TimerInput\n            adding the digits to **input**\n            displaying the digits as per **time**\n            handling functionalities such as adding digits, removing them, starting the timer */\n          <div className=\"body\">\n            <TimerInput\n              input={input}\n              time={time}\n              handleDial={this.handleDial}\n              handleDialBack={this.handleDialBack}\n              handleTimerStart={this.handleTimerStart}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}