{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nclass Mover {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  move(delta) {\n    const particle = this.particle;\n    particle.bubble.inRange = false;\n    particle.links = [];\n\n    for (const [, plugin] of this.container.plugins) {\n      if (particle.destroyed) {\n        break;\n      }\n\n      if (plugin.particleUpdate) {\n        plugin.particleUpdate(particle, delta);\n      }\n    }\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    this.moveParticle(delta);\n    this.moveParallax();\n  }\n\n  moveParticle(delta) {\n    var _a, _b;\n\n    const particle = this.particle;\n    const particlesOptions = particle.options;\n\n    if (!particlesOptions.move.enable) {\n      return;\n    }\n\n    const container = this.container;\n    const slowFactor = this.getProximitySpeedFactor();\n    const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.NumberUtils.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) * container.retina.reduceFactor;\n    const maxSize = Utils_1.NumberUtils.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n    const moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;\n    const moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.NumberUtils.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\n    this.applyPath(delta);\n    const gravityOptions = particlesOptions.move.gravity;\n    const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n\n    if (gravityOptions.enable) {\n      particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n    }\n\n    if (moveSpeed) {\n      particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n    }\n\n    particle.velocity.multTo(1 - particle.options.move.decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n\n    if (gravityOptions.enable && Math.abs(velocity.y) >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n      velocity.y = gravityFactor * gravityOptions.maxSpeed;\n\n      if (moveSpeed) {\n        particle.velocity.y = velocity.y / moveSpeed;\n      }\n    }\n\n    particle.position.addTo(velocity);\n\n    if (particlesOptions.move.vibrate) {\n      particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n      particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n    }\n\n    const initialPosition = particle.initialPosition;\n    const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n\n    if (particle.maxDistance) {\n      if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n        particle.misplaced = initialDistance > particle.maxDistance;\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n      } else if (initialDistance < particle.maxDistance && particle.misplaced) {\n        particle.misplaced = false;\n      } else if (particle.misplaced) {\n        if (particle.position.x < initialPosition.x && particle.velocity.x < 0 || particle.position.x > initialPosition.x && particle.velocity.x > 0) {\n          particle.velocity.x *= -Math.random();\n        }\n\n        if (particle.position.y < initialPosition.y && particle.velocity.y < 0 || particle.position.y > initialPosition.y && particle.velocity.y > 0) {\n          particle.velocity.y *= -Math.random();\n        }\n      }\n    }\n  }\n\n  applyPath(delta) {\n    const particle = this.particle;\n    const particlesOptions = particle.options;\n    const pathOptions = particlesOptions.move.path;\n    const pathEnabled = pathOptions.enable;\n\n    if (!pathEnabled) {\n      return;\n    }\n\n    const container = this.container;\n\n    if (particle.lastPathTime <= particle.pathDelay) {\n      particle.lastPathTime += delta.value;\n      return;\n    }\n\n    let generator = container.pathGenerator;\n\n    if (pathOptions.generator) {\n      const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n\n      if (customGenerator) {\n        generator = customGenerator;\n      }\n    }\n\n    const path = generator.generate(particle);\n    particle.velocity.addTo(path);\n\n    if (pathOptions.clamp) {\n      particle.velocity.x = Utils_1.NumberUtils.clamp(particle.velocity.x, -1, 1);\n      particle.velocity.y = Utils_1.NumberUtils.clamp(particle.velocity.y, -1, 1);\n    }\n\n    particle.lastPathTime -= particle.pathDelay;\n  }\n\n  moveParallax() {\n    const container = this.container;\n    const options = container.actualOptions;\n\n    if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    const particle = this.particle;\n    const parallaxForce = options.interactivity.events.onHover.parallax.force;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const canvasCenter = {\n      x: container.canvas.size.width / 2,\n      y: container.canvas.size.height / 2\n    };\n    const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    const factor = particle.getRadius() / parallaxForce;\n    const tmp = {\n      x: (mousePos.x - canvasCenter.x) * factor,\n      y: (mousePos.y - canvasCenter.y) * factor\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  }\n\n  getProximitySpeedFactor() {\n    const container = this.container;\n    const options = container.actualOptions;\n    const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n    if (!active) {\n      return 1;\n    }\n\n    const mousePos = this.container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return 1;\n    }\n\n    const particlePos = this.particle.getPosition();\n    const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n\n    if (dist > radius) {\n      return 1;\n    }\n\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  }\n\n}\n\nexports.Mover = Mover;","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/node_modules/tsparticles/dist/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","constructor","container","particle","move","delta","bubble","inRange","links","plugin","plugins","destroyed","particleUpdate","moveParticle","moveParallax","_a","_b","particlesOptions","options","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","NumberUtils","getRangeValue","speed","retina","pixelRatio","reduceFactor","maxSize","getRangeMax","size","sizeFactor","getRadius","factor","moveDrift","drift","applyPath","gravityOptions","gravity","gravityFactor","inverse","velocity","y","acceleration","x","multTo","decay","mult","Math","abs","maxSpeed","position","addTo","vibrate","sin","cos","initialPosition","initialDistance","getDistance","maxDistance","misplaced","random","pathOptions","path","pathEnabled","lastPathTime","pathDelay","generator","pathGenerator","customGenerator","Plugins","getPathGenerator","generate","clamp","actualOptions","Utils","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","canvas","width","height","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","radius","slowModeRadius","proximityFactor","modes"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgB,KAAK,CAArB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMF,KAAN,CAAY;AACRI,EAAAA,WAAW,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AAC7B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;;AACDC,EAAAA,IAAI,CAACC,KAAD,EAAQ;AACR,UAAMF,QAAQ,GAAG,KAAKA,QAAtB;AACAA,IAAAA,QAAQ,CAACG,MAAT,CAAgBC,OAAhB,GAA0B,KAA1B;AACAJ,IAAAA,QAAQ,CAACK,KAAT,GAAiB,EAAjB;;AACA,SAAK,MAAM,GAAGC,MAAH,CAAX,IAAyB,KAAKP,SAAL,CAAeQ,OAAxC,EAAiD;AAC7C,UAAIP,QAAQ,CAACQ,SAAb,EAAwB;AACpB;AACH;;AACD,UAAIF,MAAM,CAACG,cAAX,EAA2B;AACvBH,QAAAA,MAAM,CAACG,cAAP,CAAsBT,QAAtB,EAAgCE,KAAhC;AACH;AACJ;;AACD,QAAIF,QAAQ,CAACQ,SAAb,EAAwB;AACpB;AACH;;AACD,SAAKE,YAAL,CAAkBR,KAAlB;AACA,SAAKS,YAAL;AACH;;AACDD,EAAAA,YAAY,CAACR,KAAD,EAAQ;AAChB,QAAIU,EAAJ,EAAQC,EAAR;;AACA,UAAMb,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMc,gBAAgB,GAAGd,QAAQ,CAACe,OAAlC;;AACA,QAAI,CAACD,gBAAgB,CAACb,IAAjB,CAAsBe,MAA3B,EAAmC;AAC/B;AACH;;AACD,UAAMjB,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMkB,UAAU,GAAG,KAAKC,uBAAL,EAAnB;AACA,UAAMC,SAAS,GAAG,CAAC,CAACP,EAAE,GAAGZ,QAAQ,CAACoB,SAAf,MAA8B,IAA9B,IAAsCR,EAAE,KAAK,KAAK,CAAlD,GAAsDA,EAAtD,GAA2DjB,OAAO,CAAC0B,WAAR,CAAoBC,aAApB,CAAkCtB,QAAQ,CAACe,OAAT,CAAiBd,IAAjB,CAAsBsB,KAAxD,IAAiExB,SAAS,CAACyB,MAAV,CAAiBC,UAA9I,IACd1B,SAAS,CAACyB,MAAV,CAAiBE,YADrB;AAEA,UAAMC,OAAO,GAAGhC,OAAO,CAAC0B,WAAR,CAAoBO,WAApB,CAAgC5B,QAAQ,CAACe,OAAT,CAAiBc,IAAjB,CAAsBpC,KAAtD,IAA+DM,SAAS,CAACyB,MAAV,CAAiBC,UAAhG;AACA,UAAMK,UAAU,GAAGhB,gBAAgB,CAACb,IAAjB,CAAsB4B,IAAtB,GAA6B7B,QAAQ,CAAC+B,SAAT,KAAuBJ,OAApD,GAA8D,CAAjF;AACA,UAAMP,SAAS,GAAID,SAAS,GAAG,CAAb,GAAkBW,UAAlB,GAA+Bb,UAA/B,GAA4Cf,KAAK,CAAC8B,MAApE;AACA,UAAMC,SAAS,GAAG,CAACpB,EAAE,GAAGb,QAAQ,CAACiC,SAAf,MAA8B,IAA9B,IAAsCpB,EAAE,KAAK,KAAK,CAAlD,GAAsDA,EAAtD,GAA2DlB,OAAO,CAAC0B,WAAR,CAAoBC,aAApB,CAAkCtB,QAAQ,CAACe,OAAT,CAAiBd,IAAjB,CAAsBiC,KAAxD,IAAiEnC,SAAS,CAACyB,MAAV,CAAiBC,UAA/J;AACA,SAAKU,SAAL,CAAejC,KAAf;AACA,UAAMkC,cAAc,GAAGtB,gBAAgB,CAACb,IAAjB,CAAsBoC,OAA7C;AACA,UAAMC,aAAa,GAAGF,cAAc,CAACpB,MAAf,IAAyBoB,cAAc,CAACG,OAAxC,GAAkD,CAAC,CAAnD,GAAuD,CAA7E;;AACA,QAAIH,cAAc,CAACpB,MAAnB,EAA2B;AACvBhB,MAAAA,QAAQ,CAACwC,QAAT,CAAkBC,CAAlB,IAAwBH,aAAa,IAAIF,cAAc,CAACM,YAAf,GAA8BxC,KAAK,CAAC8B,MAAxC,CAAd,IAAkE,KAAKZ,SAAvE,CAAvB;AACH;;AACD,QAAIA,SAAJ,EAAe;AACXpB,MAAAA,QAAQ,CAACwC,QAAT,CAAkBG,CAAlB,IAAwBV,SAAS,GAAG/B,KAAK,CAAC8B,MAAnB,IAA8B,KAAKZ,SAAnC,CAAvB;AACH;;AACDpB,IAAAA,QAAQ,CAACwC,QAAT,CAAkBI,MAAlB,CAAyB,IAAI5C,QAAQ,CAACe,OAAT,CAAiBd,IAAjB,CAAsB4C,KAAnD;AACA,UAAML,QAAQ,GAAGxC,QAAQ,CAACwC,QAAT,CAAkBM,IAAlB,CAAuB1B,SAAvB,CAAjB;;AACA,QAAIgB,cAAc,CAACpB,MAAf,IAAyB+B,IAAI,CAACC,GAAL,CAASR,QAAQ,CAACC,CAAlB,KAAwBL,cAAc,CAACa,QAAhE,IAA4Eb,cAAc,CAACa,QAAf,GAA0B,CAA1G,EAA6G;AACzGT,MAAAA,QAAQ,CAACC,CAAT,GAAaH,aAAa,GAAGF,cAAc,CAACa,QAA5C;;AACA,UAAI7B,SAAJ,EAAe;AACXpB,QAAAA,QAAQ,CAACwC,QAAT,CAAkBC,CAAlB,GAAsBD,QAAQ,CAACC,CAAT,GAAarB,SAAnC;AACH;AACJ;;AACDpB,IAAAA,QAAQ,CAACkD,QAAT,CAAkBC,KAAlB,CAAwBX,QAAxB;;AACA,QAAI1B,gBAAgB,CAACb,IAAjB,CAAsBmD,OAA1B,EAAmC;AAC/BpD,MAAAA,QAAQ,CAACkD,QAAT,CAAkBP,CAAlB,IAAuBI,IAAI,CAACM,GAAL,CAASrD,QAAQ,CAACkD,QAAT,CAAkBP,CAAlB,GAAsBI,IAAI,CAACO,GAAL,CAAStD,QAAQ,CAACkD,QAAT,CAAkBT,CAA3B,CAA/B,CAAvB;AACAzC,MAAAA,QAAQ,CAACkD,QAAT,CAAkBT,CAAlB,IAAuBM,IAAI,CAACO,GAAL,CAAStD,QAAQ,CAACkD,QAAT,CAAkBT,CAAlB,GAAsBM,IAAI,CAACM,GAAL,CAASrD,QAAQ,CAACkD,QAAT,CAAkBP,CAA3B,CAA/B,CAAvB;AACH;;AACD,UAAMY,eAAe,GAAGvD,QAAQ,CAACuD,eAAjC;AACA,UAAMC,eAAe,GAAG7D,OAAO,CAAC0B,WAAR,CAAoBoC,WAApB,CAAgCF,eAAhC,EAAiDvD,QAAQ,CAACkD,QAA1D,CAAxB;;AACA,QAAIlD,QAAQ,CAAC0D,WAAb,EAA0B;AACtB,UAAIF,eAAe,IAAIxD,QAAQ,CAAC0D,WAA5B,IAA2C,CAAC1D,QAAQ,CAAC2D,SAAzD,EAAoE;AAChE3D,QAAAA,QAAQ,CAAC2D,SAAT,GAAqBH,eAAe,GAAGxD,QAAQ,CAAC0D,WAAhD;AACA1D,QAAAA,QAAQ,CAACwC,QAAT,CAAkBG,CAAlB,GAAsB3C,QAAQ,CAACwC,QAAT,CAAkBC,CAAlB,GAAsB,CAAtB,GAA0BzC,QAAQ,CAACwC,QAAT,CAAkBG,CAAlE;AACA3C,QAAAA,QAAQ,CAACwC,QAAT,CAAkBC,CAAlB,GAAsBzC,QAAQ,CAACwC,QAAT,CAAkBG,CAAlB,GAAsB,CAAtB,GAA0B3C,QAAQ,CAACwC,QAAT,CAAkBC,CAAlE;AACH,OAJD,MAKK,IAAIe,eAAe,GAAGxD,QAAQ,CAAC0D,WAA3B,IAA0C1D,QAAQ,CAAC2D,SAAvD,EAAkE;AACnE3D,QAAAA,QAAQ,CAAC2D,SAAT,GAAqB,KAArB;AACH,OAFI,MAGA,IAAI3D,QAAQ,CAAC2D,SAAb,EAAwB;AACzB,YAAK3D,QAAQ,CAACkD,QAAT,CAAkBP,CAAlB,GAAsBY,eAAe,CAACZ,CAAtC,IAA2C3C,QAAQ,CAACwC,QAAT,CAAkBG,CAAlB,GAAsB,CAAlE,IACC3C,QAAQ,CAACkD,QAAT,CAAkBP,CAAlB,GAAsBY,eAAe,CAACZ,CAAtC,IAA2C3C,QAAQ,CAACwC,QAAT,CAAkBG,CAAlB,GAAsB,CADtE,EAC0E;AACtE3C,UAAAA,QAAQ,CAACwC,QAAT,CAAkBG,CAAlB,IAAuB,CAACI,IAAI,CAACa,MAAL,EAAxB;AACH;;AACD,YAAK5D,QAAQ,CAACkD,QAAT,CAAkBT,CAAlB,GAAsBc,eAAe,CAACd,CAAtC,IAA2CzC,QAAQ,CAACwC,QAAT,CAAkBC,CAAlB,GAAsB,CAAlE,IACCzC,QAAQ,CAACkD,QAAT,CAAkBT,CAAlB,GAAsBc,eAAe,CAACd,CAAtC,IAA2CzC,QAAQ,CAACwC,QAAT,CAAkBC,CAAlB,GAAsB,CADtE,EAC0E;AACtEzC,UAAAA,QAAQ,CAACwC,QAAT,CAAkBC,CAAlB,IAAuB,CAACM,IAAI,CAACa,MAAL,EAAxB;AACH;AACJ;AACJ;AACJ;;AACDzB,EAAAA,SAAS,CAACjC,KAAD,EAAQ;AACb,UAAMF,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMc,gBAAgB,GAAGd,QAAQ,CAACe,OAAlC;AACA,UAAM8C,WAAW,GAAG/C,gBAAgB,CAACb,IAAjB,CAAsB6D,IAA1C;AACA,UAAMC,WAAW,GAAGF,WAAW,CAAC7C,MAAhC;;AACA,QAAI,CAAC+C,WAAL,EAAkB;AACd;AACH;;AACD,UAAMhE,SAAS,GAAG,KAAKA,SAAvB;;AACA,QAAIC,QAAQ,CAACgE,YAAT,IAAyBhE,QAAQ,CAACiE,SAAtC,EAAiD;AAC7CjE,MAAAA,QAAQ,CAACgE,YAAT,IAAyB9D,KAAK,CAACT,KAA/B;AACA;AACH;;AACD,QAAIyE,SAAS,GAAGnE,SAAS,CAACoE,aAA1B;;AACA,QAAIN,WAAW,CAACK,SAAhB,EAA2B;AACvB,YAAME,eAAe,GAAGzE,OAAO,CAAC0E,OAAR,CAAgBC,gBAAhB,CAAiCT,WAAW,CAACK,SAA7C,CAAxB;;AACA,UAAIE,eAAJ,EAAqB;AACjBF,QAAAA,SAAS,GAAGE,eAAZ;AACH;AACJ;;AACD,UAAMN,IAAI,GAAGI,SAAS,CAACK,QAAV,CAAmBvE,QAAnB,CAAb;AACAA,IAAAA,QAAQ,CAACwC,QAAT,CAAkBW,KAAlB,CAAwBW,IAAxB;;AACA,QAAID,WAAW,CAACW,KAAhB,EAAuB;AACnBxE,MAAAA,QAAQ,CAACwC,QAAT,CAAkBG,CAAlB,GAAsBhD,OAAO,CAAC0B,WAAR,CAAoBmD,KAApB,CAA0BxE,QAAQ,CAACwC,QAAT,CAAkBG,CAA5C,EAA+C,CAAC,CAAhD,EAAmD,CAAnD,CAAtB;AACA3C,MAAAA,QAAQ,CAACwC,QAAT,CAAkBC,CAAlB,GAAsB9C,OAAO,CAAC0B,WAAR,CAAoBmD,KAApB,CAA0BxE,QAAQ,CAACwC,QAAT,CAAkBC,CAA5C,EAA+C,CAAC,CAAhD,EAAmD,CAAnD,CAAtB;AACH;;AACDzC,IAAAA,QAAQ,CAACgE,YAAT,IAAyBhE,QAAQ,CAACiE,SAAlC;AACH;;AACDtD,EAAAA,YAAY,GAAG;AACX,UAAMZ,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMgB,OAAO,GAAGhB,SAAS,CAAC0E,aAA1B;;AACA,QAAI9E,OAAO,CAAC+E,KAAR,CAAcC,KAAd,MAAyB,CAAC5D,OAAO,CAAC6D,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,QAArC,CAA8C/D,MAA5E,EAAoF;AAChF;AACH;;AACD,UAAMhB,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMgF,aAAa,GAAGjE,OAAO,CAAC6D,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,QAArC,CAA8CE,KAApE;AACA,UAAMC,QAAQ,GAAGnF,SAAS,CAAC6E,aAAV,CAAwBO,KAAxB,CAA8BjC,QAA/C;;AACA,QAAI,CAACgC,QAAL,EAAe;AACX;AACH;;AACD,UAAME,YAAY,GAAG;AACjBzC,MAAAA,CAAC,EAAE5C,SAAS,CAACsF,MAAV,CAAiBxD,IAAjB,CAAsByD,KAAtB,GAA8B,CADhB;AAEjB7C,MAAAA,CAAC,EAAE1C,SAAS,CAACsF,MAAV,CAAiBxD,IAAjB,CAAsB0D,MAAtB,GAA+B;AAFjB,KAArB;AAIA,UAAMC,cAAc,GAAGzE,OAAO,CAAC6D,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,QAArC,CAA8CU,MAArE;AACA,UAAMzD,MAAM,GAAGhC,QAAQ,CAAC+B,SAAT,KAAuBiD,aAAtC;AACA,UAAMU,GAAG,GAAG;AACR/C,MAAAA,CAAC,EAAE,CAACuC,QAAQ,CAACvC,CAAT,GAAayC,YAAY,CAACzC,CAA3B,IAAgCX,MAD3B;AAERS,MAAAA,CAAC,EAAE,CAACyC,QAAQ,CAACzC,CAAT,GAAa2C,YAAY,CAAC3C,CAA3B,IAAgCT;AAF3B,KAAZ;AAIAhC,IAAAA,QAAQ,CAAC2F,MAAT,CAAgBhD,CAAhB,IAAqB,CAAC+C,GAAG,CAAC/C,CAAJ,GAAQ3C,QAAQ,CAAC2F,MAAT,CAAgBhD,CAAzB,IAA8B6C,cAAnD;AACAxF,IAAAA,QAAQ,CAAC2F,MAAT,CAAgBlD,CAAhB,IAAqB,CAACiD,GAAG,CAACjD,CAAJ,GAAQzC,QAAQ,CAAC2F,MAAT,CAAgBlD,CAAzB,IAA8B+C,cAAnD;AACH;;AACDtE,EAAAA,uBAAuB,GAAG;AACtB,UAAMnB,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMgB,OAAO,GAAGhB,SAAS,CAAC0E,aAA1B;AACA,UAAMmB,MAAM,GAAGjG,OAAO,CAAC+E,KAAR,CAAcmB,SAAd,CAAwBhG,OAAO,CAACiG,SAAR,CAAkBC,IAA1C,EAAgDhF,OAAO,CAAC6D,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCkB,IAArF,CAAf;;AACA,QAAI,CAACJ,MAAL,EAAa;AACT,aAAO,CAAP;AACH;;AACD,UAAMV,QAAQ,GAAG,KAAKnF,SAAL,CAAe6E,aAAf,CAA6BO,KAA7B,CAAmCjC,QAApD;;AACA,QAAI,CAACgC,QAAL,EAAe;AACX,aAAO,CAAP;AACH;;AACD,UAAMe,WAAW,GAAG,KAAKjG,QAAL,CAAckG,WAAd,EAApB;AACA,UAAMC,IAAI,GAAGxG,OAAO,CAAC0B,WAAR,CAAoBoC,WAApB,CAAgCyB,QAAhC,EAA0Ce,WAA1C,CAAb;AACA,UAAMG,MAAM,GAAGrG,SAAS,CAACyB,MAAV,CAAiB6E,cAAhC;;AACA,QAAIF,IAAI,GAAGC,MAAX,EAAmB;AACf,aAAO,CAAP;AACH;;AACD,UAAME,eAAe,GAAGH,IAAI,GAAGC,MAAP,IAAiB,CAAzC;AACA,UAAMnF,UAAU,GAAGF,OAAO,CAAC6D,aAAR,CAAsB2B,KAAtB,CAA4BR,IAA5B,CAAiC/D,MAApD;AACA,WAAOsE,eAAe,GAAGrF,UAAzB;AACH;;AA5JO;;AA8JZzB,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nclass Mover {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    move(delta) {\n        const particle = this.particle;\n        particle.bubble.inRange = false;\n        particle.links = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (particle.destroyed) {\n                break;\n            }\n            if (plugin.particleUpdate) {\n                plugin.particleUpdate(particle, delta);\n            }\n        }\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(delta);\n        this.moveParallax();\n    }\n    moveParticle(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        if (!particlesOptions.move.enable) {\n            return;\n        }\n        const container = this.container;\n        const slowFactor = this.getProximitySpeedFactor();\n        const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.NumberUtils.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) *\n            container.retina.reduceFactor;\n        const maxSize = Utils_1.NumberUtils.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n        const moveSpeed = (baseSpeed / 2) * sizeFactor * slowFactor * delta.factor;\n        const moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.NumberUtils.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\n        this.applyPath(delta);\n        const gravityOptions = particlesOptions.move.gravity;\n        const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        particle.velocity.multTo(1 - particle.options.move.decay);\n        const velocity = particle.velocity.mult(moveSpeed);\n        if (gravityOptions.enable && Math.abs(velocity.y) >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n            velocity.y = gravityFactor * gravityOptions.maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        particle.position.addTo(velocity);\n        if (particlesOptions.move.vibrate) {\n            particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n            particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n        const initialPosition = particle.initialPosition;\n        const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n        if (particle.maxDistance) {\n            if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n                particle.misplaced = initialDistance > particle.maxDistance;\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n            }\n            else if (initialDistance < particle.maxDistance && particle.misplaced) {\n                particle.misplaced = false;\n            }\n            else if (particle.misplaced) {\n                if ((particle.position.x < initialPosition.x && particle.velocity.x < 0) ||\n                    (particle.position.x > initialPosition.x && particle.velocity.x > 0)) {\n                    particle.velocity.x *= -Math.random();\n                }\n                if ((particle.position.y < initialPosition.y && particle.velocity.y < 0) ||\n                    (particle.position.y > initialPosition.y && particle.velocity.y > 0)) {\n                    particle.velocity.y *= -Math.random();\n                }\n            }\n        }\n    }\n    applyPath(delta) {\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        const pathOptions = particlesOptions.move.path;\n        const pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastPathTime <= particle.pathDelay) {\n            particle.lastPathTime += delta.value;\n            return;\n        }\n        let generator = container.pathGenerator;\n        if (pathOptions.generator) {\n            const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n            if (customGenerator) {\n                generator = customGenerator;\n            }\n        }\n        const path = generator.generate(particle);\n        particle.velocity.addTo(path);\n        if (pathOptions.clamp) {\n            particle.velocity.x = Utils_1.NumberUtils.clamp(particle.velocity.x, -1, 1);\n            particle.velocity.y = Utils_1.NumberUtils.clamp(particle.velocity.y, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n    }\n    moveParallax() {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const particle = this.particle;\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor() {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = this.particle.getPosition();\n        const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}