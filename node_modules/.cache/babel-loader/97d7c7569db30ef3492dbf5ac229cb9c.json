{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { ChannelListMessenger } from './ChannelListMessenger';\nimport { useChannelDeletedListener } from './hooks/useChannelDeletedListener';\nimport { useChannelHiddenListener } from './hooks/useChannelHiddenListener';\nimport { useChannelTruncatedListener } from './hooks/useChannelTruncatedListener';\nimport { useChannelUpdatedListener } from './hooks/useChannelUpdatedListener';\nimport { useChannelVisibleListener } from './hooks/useChannelVisibleListener';\nimport { useConnectionRecoveredListener } from './hooks/useConnectionRecoveredListener';\nimport { useMessageNewListener } from './hooks/useMessageNewListener';\nimport { useMobileNavigation } from './hooks/useMobileNavigation';\nimport { useNotificationAddedToChannelListener } from './hooks/useNotificationAddedToChannelListener';\nimport { useNotificationMessageNewListener } from './hooks/useNotificationMessageNewListener';\nimport { useNotificationRemovedFromChannelListener } from './hooks/useNotificationRemovedFromChannelListener';\nimport { usePaginatedChannels } from './hooks/usePaginatedChannels';\nimport { useUserPresenceChangedListener } from './hooks/useUserPresenceChangedListener';\nimport { MAX_QUERY_CHANNELS_LIMIT, moveChannelUp } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar/Avatar';\nimport { ChannelPreview } from '../ChannelPreview/ChannelPreview';\nimport { ChannelSearch as DefaultChannelSearch } from '../ChannelSearch/ChannelSearch';\nimport { ChatDown } from '../ChatDown/ChatDown';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { LoadingChannels } from '../Loading/LoadingChannels';\nimport { LoadMorePaginator } from '../LoadMore/LoadMorePaginator';\nimport { useChatContext } from '../../context/ChatContext';\nvar DEFAULT_FILTERS = {};\nvar DEFAULT_OPTIONS = {};\nvar DEFAULT_SORT = {};\n\nvar UnMemoizedChannelList = function (props) {\n  var additionalChannelSearchProps = props.additionalChannelSearchProps,\n      _a = props.Avatar,\n      Avatar = _a === void 0 ? DefaultAvatar : _a,\n      allowNewMessagesFromUnfilteredChannels = props.allowNewMessagesFromUnfilteredChannels,\n      channelRenderFilterFn = props.channelRenderFilterFn,\n      _b = props.ChannelSearch,\n      ChannelSearch = _b === void 0 ? DefaultChannelSearch : _b,\n      customActiveChannel = props.customActiveChannel,\n      _c = props.EmptyStateIndicator,\n      EmptyStateIndicator = _c === void 0 ? DefaultEmptyStateIndicator : _c,\n      filters = props.filters,\n      _d = props.LoadingErrorIndicator,\n      LoadingErrorIndicator = _d === void 0 ? ChatDown : _d,\n      _e = props.LoadingIndicator,\n      LoadingIndicator = _e === void 0 ? LoadingChannels : _e,\n      _f = props.List,\n      List = _f === void 0 ? ChannelListMessenger : _f,\n      lockChannelOrder = props.lockChannelOrder,\n      onAddedToChannel = props.onAddedToChannel,\n      onChannelDeleted = props.onChannelDeleted,\n      onChannelHidden = props.onChannelHidden,\n      onChannelTruncated = props.onChannelTruncated,\n      onChannelUpdated = props.onChannelUpdated,\n      onChannelVisible = props.onChannelVisible,\n      onMessageNew = props.onMessageNew,\n      onRemovedFromChannel = props.onRemovedFromChannel,\n      options = props.options,\n      _g = props.Paginator,\n      Paginator = _g === void 0 ? LoadMorePaginator : _g,\n      Preview = props.Preview,\n      _h = props.setActiveChannelOnMount,\n      setActiveChannelOnMount = _h === void 0 ? true : _h,\n      _j = props.showChannelSearch,\n      showChannelSearch = _j === void 0 ? false : _j,\n      _k = props.sort,\n      sort = _k === void 0 ? DEFAULT_SORT : _k,\n      _l = props.watchers,\n      watchers = _l === void 0 ? {} : _l;\n\n  var _m = useChatContext(),\n      channel = _m.channel,\n      client = _m.client,\n      closeMobileNav = _m.closeMobileNav,\n      _o = _m.navOpen,\n      navOpen = _o === void 0 ? false : _o,\n      setActiveChannel = _m.setActiveChannel,\n      theme = _m.theme,\n      useImageFlagEmojisOnWindows = _m.useImageFlagEmojisOnWindows;\n\n  var channelListRef = useRef(null);\n\n  var _p = useState(0),\n      channelUpdateCount = _p[0],\n      setChannelUpdateCount = _p[1];\n  /**\n   * Set a channel with id {customActiveChannel} as active and move it to the top of the list.\n   * If customActiveChannel prop is absent, then set the first channel in list as active channel.\n   */\n\n\n  var activeChannelHandler = function (channels, setChannels) {\n    if (!channels || channels.length === 0 || channels.length > ((options === null || options === void 0 ? void 0 : options.limit) || MAX_QUERY_CHANNELS_LIMIT)) {\n      return;\n    }\n\n    if (customActiveChannel) {\n      var customActiveChannelObject = channels.find(function (chan) {\n        return chan.id === customActiveChannel;\n      });\n\n      if (customActiveChannelObject) {\n        if (setActiveChannel) {\n          setActiveChannel(customActiveChannelObject, watchers);\n        }\n\n        var newChannels = moveChannelUp(customActiveChannelObject.cid, channels);\n        setChannels(newChannels);\n      }\n\n      return;\n    }\n\n    if (setActiveChannelOnMount && setActiveChannel) {\n      setActiveChannel(channels[0], watchers);\n    }\n  };\n  /**\n   * For some events, inner properties on the channel will update but the shallow comparison will not\n   * force a re-render. Incrementing this dummy variable ensures the channel previews update.\n   */\n\n\n  var forceUpdate = function () {\n    return setChannelUpdateCount(function (count) {\n      return count + 1;\n    });\n  };\n\n  var _q = usePaginatedChannels(client, filters || DEFAULT_FILTERS, sort || DEFAULT_SORT, options || DEFAULT_OPTIONS, activeChannelHandler),\n      channels = _q.channels,\n      hasNextPage = _q.hasNextPage,\n      loadNextPage = _q.loadNextPage,\n      setChannels = _q.setChannels,\n      status = _q.status;\n\n  var loadedChannels = channelRenderFilterFn ? channelRenderFilterFn(channels) : channels;\n  useMobileNavigation(channelListRef, navOpen, closeMobileNav);\n  useMessageNewListener(setChannels, lockChannelOrder, allowNewMessagesFromUnfilteredChannels);\n  useNotificationMessageNewListener(setChannels, onMessageNew);\n  useNotificationAddedToChannelListener(setChannels, onAddedToChannel);\n  useNotificationRemovedFromChannelListener(setChannels, onRemovedFromChannel);\n  useChannelDeletedListener(setChannels, onChannelDeleted);\n  useChannelHiddenListener(setChannels, onChannelHidden);\n  useChannelVisibleListener(setChannels, onChannelVisible);\n  useChannelTruncatedListener(setChannels, onChannelTruncated, forceUpdate);\n  useChannelUpdatedListener(setChannels, onChannelUpdated, forceUpdate);\n  useConnectionRecoveredListener(forceUpdate);\n  useUserPresenceChangedListener(setChannels);\n  useEffect(function () {\n    var handleEvent = function (event) {\n      if (setActiveChannel && (event === null || event === void 0 ? void 0 : event.cid) === (channel === null || channel === void 0 ? void 0 : channel.cid)) {\n        setActiveChannel();\n      }\n    };\n\n    client.on('channel.deleted', handleEvent);\n    client.on('channel.hidden', handleEvent);\n    return function () {\n      client.off('channel.deleted', handleEvent);\n      client.off('channel.hidden', handleEvent);\n    };\n  }, [channel]);\n\n  var renderChannel = function (item) {\n    if (!item) return null;\n    var previewProps = {\n      activeChannel: channel,\n      Avatar: Avatar,\n      channel: item,\n      channelUpdateCount: channelUpdateCount,\n      key: item.id,\n      Preview: Preview,\n      setActiveChannel: setActiveChannel,\n      watchers: watchers\n    };\n    return React.createElement(ChannelPreview, __assign({}, previewProps));\n  };\n\n  var renderList = function () {\n    return React.createElement(List, {\n      error: status.error,\n      loading: status.loadingChannels,\n      LoadingErrorIndicator: LoadingErrorIndicator,\n      LoadingIndicator: LoadingIndicator\n    }, !loadedChannels || loadedChannels.length === 0 ? React.createElement(EmptyStateIndicator, {\n      listType: 'channel'\n    }) : React.createElement(Paginator, {\n      hasNextPage: hasNextPage,\n      loadNextPage: loadNextPage,\n      refreshing: status.refreshing\n    }, loadedChannels.map(renderChannel)));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"str-chat str-chat-channel-list \" + theme + \" \" + (navOpen ? 'str-chat-channel-list--open' : '') + \" \" + (useImageFlagEmojisOnWindows && navigator.platform.match(/Win/) ? 'str-chat--windows-flags' : ''),\n    ref: channelListRef\n  }, showChannelSearch && React.createElement(ChannelSearch, __assign({}, additionalChannelSearchProps)), renderList()));\n};\n/**\n * Renders a preview list of Channels, allowing you to select the Channel you want to open\n */\n\n\nexport var ChannelList = React.memo(UnMemoizedChannelList);","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/node_modules/stream-chat-react/dist/components/ChannelList/ChannelList.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useEffect","useRef","useState","ChannelListMessenger","useChannelDeletedListener","useChannelHiddenListener","useChannelTruncatedListener","useChannelUpdatedListener","useChannelVisibleListener","useConnectionRecoveredListener","useMessageNewListener","useMobileNavigation","useNotificationAddedToChannelListener","useNotificationMessageNewListener","useNotificationRemovedFromChannelListener","usePaginatedChannels","useUserPresenceChangedListener","MAX_QUERY_CHANNELS_LIMIT","moveChannelUp","Avatar","DefaultAvatar","ChannelPreview","ChannelSearch","DefaultChannelSearch","ChatDown","EmptyStateIndicator","DefaultEmptyStateIndicator","LoadingChannels","LoadMorePaginator","useChatContext","DEFAULT_FILTERS","DEFAULT_OPTIONS","DEFAULT_SORT","UnMemoizedChannelList","props","additionalChannelSearchProps","_a","allowNewMessagesFromUnfilteredChannels","channelRenderFilterFn","_b","customActiveChannel","_c","filters","_d","LoadingErrorIndicator","_e","LoadingIndicator","_f","List","lockChannelOrder","onAddedToChannel","onChannelDeleted","onChannelHidden","onChannelTruncated","onChannelUpdated","onChannelVisible","onMessageNew","onRemovedFromChannel","options","_g","Paginator","Preview","_h","setActiveChannelOnMount","_j","showChannelSearch","_k","sort","_l","watchers","_m","channel","client","closeMobileNav","_o","navOpen","setActiveChannel","theme","useImageFlagEmojisOnWindows","channelListRef","_p","channelUpdateCount","setChannelUpdateCount","activeChannelHandler","channels","setChannels","limit","customActiveChannelObject","find","chan","id","newChannels","cid","forceUpdate","count","_q","hasNextPage","loadNextPage","status","loadedChannels","handleEvent","event","on","off","renderChannel","item","previewProps","activeChannel","key","createElement","renderList","error","loading","loadingChannels","listType","refreshing","map","Fragment","className","navigator","platform","match","ref","ChannelList","memo"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useEffect, useRef, useState } from 'react';\nimport { ChannelListMessenger } from './ChannelListMessenger';\nimport { useChannelDeletedListener } from './hooks/useChannelDeletedListener';\nimport { useChannelHiddenListener } from './hooks/useChannelHiddenListener';\nimport { useChannelTruncatedListener } from './hooks/useChannelTruncatedListener';\nimport { useChannelUpdatedListener } from './hooks/useChannelUpdatedListener';\nimport { useChannelVisibleListener } from './hooks/useChannelVisibleListener';\nimport { useConnectionRecoveredListener } from './hooks/useConnectionRecoveredListener';\nimport { useMessageNewListener } from './hooks/useMessageNewListener';\nimport { useMobileNavigation } from './hooks/useMobileNavigation';\nimport { useNotificationAddedToChannelListener } from './hooks/useNotificationAddedToChannelListener';\nimport { useNotificationMessageNewListener } from './hooks/useNotificationMessageNewListener';\nimport { useNotificationRemovedFromChannelListener } from './hooks/useNotificationRemovedFromChannelListener';\nimport { usePaginatedChannels } from './hooks/usePaginatedChannels';\nimport { useUserPresenceChangedListener } from './hooks/useUserPresenceChangedListener';\nimport { MAX_QUERY_CHANNELS_LIMIT, moveChannelUp } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar/Avatar';\nimport { ChannelPreview } from '../ChannelPreview/ChannelPreview';\nimport { ChannelSearch as DefaultChannelSearch, } from '../ChannelSearch/ChannelSearch';\nimport { ChatDown } from '../ChatDown/ChatDown';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator, } from '../EmptyStateIndicator';\nimport { LoadingChannels } from '../Loading/LoadingChannels';\nimport { LoadMorePaginator } from '../LoadMore/LoadMorePaginator';\nimport { useChatContext } from '../../context/ChatContext';\nvar DEFAULT_FILTERS = {};\nvar DEFAULT_OPTIONS = {};\nvar DEFAULT_SORT = {};\nvar UnMemoizedChannelList = function (props) {\n    var additionalChannelSearchProps = props.additionalChannelSearchProps, _a = props.Avatar, Avatar = _a === void 0 ? DefaultAvatar : _a, allowNewMessagesFromUnfilteredChannels = props.allowNewMessagesFromUnfilteredChannels, channelRenderFilterFn = props.channelRenderFilterFn, _b = props.ChannelSearch, ChannelSearch = _b === void 0 ? DefaultChannelSearch : _b, customActiveChannel = props.customActiveChannel, _c = props.EmptyStateIndicator, EmptyStateIndicator = _c === void 0 ? DefaultEmptyStateIndicator : _c, filters = props.filters, _d = props.LoadingErrorIndicator, LoadingErrorIndicator = _d === void 0 ? ChatDown : _d, _e = props.LoadingIndicator, LoadingIndicator = _e === void 0 ? LoadingChannels : _e, _f = props.List, List = _f === void 0 ? ChannelListMessenger : _f, lockChannelOrder = props.lockChannelOrder, onAddedToChannel = props.onAddedToChannel, onChannelDeleted = props.onChannelDeleted, onChannelHidden = props.onChannelHidden, onChannelTruncated = props.onChannelTruncated, onChannelUpdated = props.onChannelUpdated, onChannelVisible = props.onChannelVisible, onMessageNew = props.onMessageNew, onRemovedFromChannel = props.onRemovedFromChannel, options = props.options, _g = props.Paginator, Paginator = _g === void 0 ? LoadMorePaginator : _g, Preview = props.Preview, _h = props.setActiveChannelOnMount, setActiveChannelOnMount = _h === void 0 ? true : _h, _j = props.showChannelSearch, showChannelSearch = _j === void 0 ? false : _j, _k = props.sort, sort = _k === void 0 ? DEFAULT_SORT : _k, _l = props.watchers, watchers = _l === void 0 ? {} : _l;\n    var _m = useChatContext(), channel = _m.channel, client = _m.client, closeMobileNav = _m.closeMobileNav, _o = _m.navOpen, navOpen = _o === void 0 ? false : _o, setActiveChannel = _m.setActiveChannel, theme = _m.theme, useImageFlagEmojisOnWindows = _m.useImageFlagEmojisOnWindows;\n    var channelListRef = useRef(null);\n    var _p = useState(0), channelUpdateCount = _p[0], setChannelUpdateCount = _p[1];\n    /**\n     * Set a channel with id {customActiveChannel} as active and move it to the top of the list.\n     * If customActiveChannel prop is absent, then set the first channel in list as active channel.\n     */\n    var activeChannelHandler = function (channels, setChannels) {\n        if (!channels ||\n            channels.length === 0 ||\n            channels.length > ((options === null || options === void 0 ? void 0 : options.limit) || MAX_QUERY_CHANNELS_LIMIT)) {\n            return;\n        }\n        if (customActiveChannel) {\n            var customActiveChannelObject = channels.find(function (chan) { return chan.id === customActiveChannel; });\n            if (customActiveChannelObject) {\n                if (setActiveChannel) {\n                    setActiveChannel(customActiveChannelObject, watchers);\n                }\n                var newChannels = moveChannelUp(customActiveChannelObject.cid, channels);\n                setChannels(newChannels);\n            }\n            return;\n        }\n        if (setActiveChannelOnMount && setActiveChannel) {\n            setActiveChannel(channels[0], watchers);\n        }\n    };\n    /**\n     * For some events, inner properties on the channel will update but the shallow comparison will not\n     * force a re-render. Incrementing this dummy variable ensures the channel previews update.\n     */\n    var forceUpdate = function () { return setChannelUpdateCount(function (count) { return count + 1; }); };\n    var _q = usePaginatedChannels(client, filters || DEFAULT_FILTERS, sort || DEFAULT_SORT, options || DEFAULT_OPTIONS, activeChannelHandler), channels = _q.channels, hasNextPage = _q.hasNextPage, loadNextPage = _q.loadNextPage, setChannels = _q.setChannels, status = _q.status;\n    var loadedChannels = channelRenderFilterFn ? channelRenderFilterFn(channels) : channels;\n    useMobileNavigation(channelListRef, navOpen, closeMobileNav);\n    useMessageNewListener(setChannels, lockChannelOrder, allowNewMessagesFromUnfilteredChannels);\n    useNotificationMessageNewListener(setChannels, onMessageNew);\n    useNotificationAddedToChannelListener(setChannels, onAddedToChannel);\n    useNotificationRemovedFromChannelListener(setChannels, onRemovedFromChannel);\n    useChannelDeletedListener(setChannels, onChannelDeleted);\n    useChannelHiddenListener(setChannels, onChannelHidden);\n    useChannelVisibleListener(setChannels, onChannelVisible);\n    useChannelTruncatedListener(setChannels, onChannelTruncated, forceUpdate);\n    useChannelUpdatedListener(setChannels, onChannelUpdated, forceUpdate);\n    useConnectionRecoveredListener(forceUpdate);\n    useUserPresenceChangedListener(setChannels);\n    useEffect(function () {\n        var handleEvent = function (event) {\n            if (setActiveChannel && (event === null || event === void 0 ? void 0 : event.cid) === (channel === null || channel === void 0 ? void 0 : channel.cid)) {\n                setActiveChannel();\n            }\n        };\n        client.on('channel.deleted', handleEvent);\n        client.on('channel.hidden', handleEvent);\n        return function () {\n            client.off('channel.deleted', handleEvent);\n            client.off('channel.hidden', handleEvent);\n        };\n    }, [channel]);\n    var renderChannel = function (item) {\n        if (!item)\n            return null;\n        var previewProps = {\n            activeChannel: channel,\n            Avatar: Avatar,\n            channel: item,\n            channelUpdateCount: channelUpdateCount,\n            key: item.id,\n            Preview: Preview,\n            setActiveChannel: setActiveChannel,\n            watchers: watchers,\n        };\n        return React.createElement(ChannelPreview, __assign({}, previewProps));\n    };\n    var renderList = function () { return (React.createElement(List, { error: status.error, loading: status.loadingChannels, LoadingErrorIndicator: LoadingErrorIndicator, LoadingIndicator: LoadingIndicator }, !loadedChannels || loadedChannels.length === 0 ? (React.createElement(EmptyStateIndicator, { listType: 'channel' })) : (React.createElement(Paginator, { hasNextPage: hasNextPage, loadNextPage: loadNextPage, refreshing: status.refreshing }, loadedChannels.map(renderChannel))))); };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"str-chat str-chat-channel-list \" + theme + \" \" + (navOpen ? 'str-chat-channel-list--open' : '') + \" \" + (useImageFlagEmojisOnWindows && navigator.platform.match(/Win/)\n                ? 'str-chat--windows-flags'\n                : ''), ref: channelListRef },\n            showChannelSearch && React.createElement(ChannelSearch, __assign({}, additionalChannelSearchProps)),\n            renderList())));\n};\n/**\n * Renders a preview list of Channels, allowing you to select the Channel you want to open\n */\nexport var ChannelList = React.memo(UnMemoizedChannelList);\n"]},"metadata":{},"sourceType":"module"}