{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport var CooldownTimer = function (props) {\n  var cooldownInterval = props.cooldownInterval,\n      setCooldownRemaining = props.setCooldownRemaining;\n\n  var _a = useState(cooldownInterval),\n      seconds = _a[0],\n      setSeconds = _a[1];\n\n  useEffect(function () {\n    var countdownInterval = setInterval(function () {\n      if (seconds > 0) {\n        setSeconds(seconds - 1);\n      } else {\n        setCooldownRemaining(0);\n      }\n    }, 1000);\n    return function () {\n      return clearInterval(countdownInterval);\n    };\n  });\n  return React.createElement(\"div\", null, seconds === 0 ? null : seconds);\n};\nexport var useCooldownTimer = function () {\n  var client = useChatContext().client;\n  var channel = useChannelStateContext().channel;\n  var cooldownInterval = (channel.data || {}).cooldown;\n\n  var _a = useState(),\n      cooldownRemaining = _a[0],\n      setCooldownRemaining = _a[1];\n\n  useEffect(function () {\n    var handleEvent = function (event) {\n      var _a;\n\n      if (((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID) {\n        setCooldownRemaining(cooldownInterval);\n      }\n    };\n\n    if (cooldownInterval) channel.on('message.new', handleEvent);\n    return function () {\n      return channel.off('message.new', handleEvent);\n    };\n  }, [channel.id, cooldownInterval]);\n  return {\n    cooldownInterval: cooldownInterval || 0,\n    cooldownRemaining: cooldownRemaining,\n    setCooldownRemaining: setCooldownRemaining\n  };\n};","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCooldownTimer.js"],"names":["React","useEffect","useState","useChatContext","useChannelStateContext","CooldownTimer","props","cooldownInterval","setCooldownRemaining","_a","seconds","setSeconds","countdownInterval","setInterval","clearInterval","createElement","useCooldownTimer","client","channel","data","cooldown","cooldownRemaining","handleEvent","event","user","id","userID","on","off"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,sBAAT,QAAuC,sCAAvC;AACA,OAAO,IAAIC,aAAa,GAAG,UAAUC,KAAV,EAAiB;AACxC,MAAIC,gBAAgB,GAAGD,KAAK,CAACC,gBAA7B;AAAA,MAA+CC,oBAAoB,GAAGF,KAAK,CAACE,oBAA5E;;AACA,MAAIC,EAAE,GAAGP,QAAQ,CAACK,gBAAD,CAAjB;AAAA,MAAqCG,OAAO,GAAGD,EAAE,CAAC,CAAD,CAAjD;AAAA,MAAsDE,UAAU,GAAGF,EAAE,CAAC,CAAD,CAArE;;AACAR,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIW,iBAAiB,GAAGC,WAAW,CAAC,YAAY;AAC5C,UAAIH,OAAO,GAAG,CAAd,EAAiB;AACbC,QAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACH,OAFD,MAGK;AACDF,QAAAA,oBAAoB,CAAC,CAAD,CAApB;AACH;AACJ,KAPkC,EAOhC,IAPgC,CAAnC;AAQA,WAAO,YAAY;AAAE,aAAOM,aAAa,CAACF,iBAAD,CAApB;AAA0C,KAA/D;AACH,GAVQ,CAAT;AAWA,SAAOZ,KAAK,CAACe,aAAN,CAAoB,KAApB,EAA2B,IAA3B,EAAiCL,OAAO,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,OAAxD,CAAP;AACH,CAfM;AAgBP,OAAO,IAAIM,gBAAgB,GAAG,YAAY;AACtC,MAAIC,MAAM,GAAGd,cAAc,GAAGc,MAA9B;AACA,MAAIC,OAAO,GAAGd,sBAAsB,GAAGc,OAAvC;AACA,MAAIX,gBAAgB,GAAG,CAACW,OAAO,CAACC,IAAR,IAAgB,EAAjB,EAAqBC,QAA5C;;AACA,MAAIX,EAAE,GAAGP,QAAQ,EAAjB;AAAA,MAAqBmB,iBAAiB,GAAGZ,EAAE,CAAC,CAAD,CAA3C;AAAA,MAAgDD,oBAAoB,GAAGC,EAAE,CAAC,CAAD,CAAzE;;AACAR,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIqB,WAAW,GAAG,UAAUC,KAAV,EAAiB;AAC/B,UAAId,EAAJ;;AACA,UAAI,CAAC,CAACA,EAAE,GAAGc,KAAK,CAACC,IAAZ,MAAsB,IAAtB,IAA8Bf,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACgB,EAA3D,MAAmER,MAAM,CAACS,MAA9E,EAAsF;AAClFlB,QAAAA,oBAAoB,CAACD,gBAAD,CAApB;AACH;AACJ,KALD;;AAMA,QAAIA,gBAAJ,EACIW,OAAO,CAACS,EAAR,CAAW,aAAX,EAA0BL,WAA1B;AACJ,WAAO,YAAY;AAAE,aAAOJ,OAAO,CAACU,GAAR,CAAY,aAAZ,EAA2BN,WAA3B,CAAP;AAAiD,KAAtE;AACH,GAVQ,EAUN,CAACJ,OAAO,CAACO,EAAT,EAAalB,gBAAb,CAVM,CAAT;AAWA,SAAO;AAAEA,IAAAA,gBAAgB,EAAEA,gBAAgB,IAAI,CAAxC;AAA2Cc,IAAAA,iBAAiB,EAAEA,iBAA9D;AAAiFb,IAAAA,oBAAoB,EAAEA;AAAvG,GAAP;AACH,CAjBM","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport var CooldownTimer = function (props) {\n    var cooldownInterval = props.cooldownInterval, setCooldownRemaining = props.setCooldownRemaining;\n    var _a = useState(cooldownInterval), seconds = _a[0], setSeconds = _a[1];\n    useEffect(function () {\n        var countdownInterval = setInterval(function () {\n            if (seconds > 0) {\n                setSeconds(seconds - 1);\n            }\n            else {\n                setCooldownRemaining(0);\n            }\n        }, 1000);\n        return function () { return clearInterval(countdownInterval); };\n    });\n    return React.createElement(\"div\", null, seconds === 0 ? null : seconds);\n};\nexport var useCooldownTimer = function () {\n    var client = useChatContext().client;\n    var channel = useChannelStateContext().channel;\n    var cooldownInterval = (channel.data || {}).cooldown;\n    var _a = useState(), cooldownRemaining = _a[0], setCooldownRemaining = _a[1];\n    useEffect(function () {\n        var handleEvent = function (event) {\n            var _a;\n            if (((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID) {\n                setCooldownRemaining(cooldownInterval);\n            }\n        };\n        if (cooldownInterval)\n            channel.on('message.new', handleEvent);\n        return function () { return channel.off('message.new', handleEvent); };\n    }, [channel.id, cooldownInterval]);\n    return { cooldownInterval: cooldownInterval || 0, cooldownRemaining: cooldownRemaining, setCooldownRemaining: setCooldownRemaining };\n};\n"]},"metadata":{},"sourceType":"module"}