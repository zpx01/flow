{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useContext } from 'react';\nexport var ComponentContext = React.createContext({});\nexport var ComponentProvider = function (_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(ComponentContext.Provider, {\n    value: value\n  }, children);\n};\nexport var useComponentContext = function () {\n  return useContext(ComponentContext);\n};\n/**\n * Typescript currently does not support partial inference, so if ComponentContext\n * typing is desired while using the HOC withComponentContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\n\nexport var withComponentContext = function (Component) {\n  var WithComponentContextComponent = function (props) {\n    var componentContext = useComponentContext();\n    return React.createElement(Component, __assign({}, props, componentContext));\n  };\n\n  WithComponentContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithComponentContextComponent;\n};","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/node_modules/stream-chat-react/dist/context/ComponentContext.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useContext","ComponentContext","createContext","ComponentProvider","_a","children","value","createElement","Provider","useComponentContext","withComponentContext","Component","WithComponentContextComponent","props","componentContext","displayName","name","replace"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAOO,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAO,IAAIC,gBAAgB,GAAGF,KAAK,CAACG,aAAN,CAAoB,EAApB,CAAvB;AACP,OAAO,IAAIC,iBAAiB,GAAG,UAAUC,EAAV,EAAc;AACzC,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,KAAK,GAAGF,EAAE,CAACE,KAAvC;AACA,SAAQP,KAAK,CAACQ,aAAN,CAAoBN,gBAAgB,CAACO,QAArC,EAA+C;AAAEF,IAAAA,KAAK,EAAEA;AAAT,GAA/C,EAAiED,QAAjE,CAAR;AACH,CAHM;AAIP,OAAO,IAAII,mBAAmB,GAAG,YAAY;AACzC,SAAOT,UAAU,CAACC,gBAAD,CAAjB;AACH,CAFM;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIS,oBAAoB,GAAG,UAAUC,SAAV,EAAqB;AACnD,MAAIC,6BAA6B,GAAG,UAAUC,KAAV,EAAiB;AACjD,QAAIC,gBAAgB,GAAGL,mBAAmB,EAA1C;AACA,WAAOV,KAAK,CAACQ,aAAN,CAAoBI,SAApB,EAA+B1B,QAAQ,CAAC,EAAD,EAAK4B,KAAL,EAAYC,gBAAZ,CAAvC,CAAP;AACH,GAHD;;AAIAF,EAAAA,6BAA6B,CAACG,WAA9B,GAA4C,CAACJ,SAAS,CAACI,WAAV,IACzCJ,SAAS,CAACK,IAD+B,IAEzC,WAFwC,EAE3BC,OAF2B,CAEnB,MAFmB,EAEX,EAFW,CAA5C;AAGA,SAAOL,6BAAP;AACH,CATM","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\nexport var ComponentContext = React.createContext({});\nexport var ComponentProvider = function (_a) {\n    var children = _a.children, value = _a.value;\n    return (React.createElement(ComponentContext.Provider, { value: value }, children));\n};\nexport var useComponentContext = function () {\n    return useContext(ComponentContext);\n};\n/**\n * Typescript currently does not support partial inference, so if ComponentContext\n * typing is desired while using the HOC withComponentContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withComponentContext = function (Component) {\n    var WithComponentContextComponent = function (props) {\n        var componentContext = useComponentContext();\n        return React.createElement(Component, __assign({}, props, componentContext));\n    };\n    WithComponentContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithComponentContextComponent;\n};\n"]},"metadata":{},"sourceType":"module"}