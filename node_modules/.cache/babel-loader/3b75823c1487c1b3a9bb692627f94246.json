{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Mover = /*#__PURE__*/function () {\n  function Mover(container, particle) {\n    _classCallCheck(this, Mover);\n\n    this.container = container;\n    this.particle = particle;\n  }\n\n  _createClass(Mover, [{\n    key: \"move\",\n    value: function move(delta) {\n      var particle = this.particle;\n      particle.bubble.inRange = false;\n      particle.links = [];\n\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (particle.destroyed) {\n            break;\n          }\n\n          if (plugin.particleUpdate) {\n            plugin.particleUpdate(particle, delta);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (particle.destroyed) {\n        return;\n      }\n\n      this.moveParticle(delta);\n      this.moveParallax();\n    }\n  }, {\n    key: \"moveParticle\",\n    value: function moveParticle(delta) {\n      var _a, _b;\n\n      var particle = this.particle;\n      var particlesOptions = particle.options;\n\n      if (!particlesOptions.move.enable) {\n        return;\n      }\n\n      var container = this.container;\n      var slowFactor = this.getProximitySpeedFactor();\n      var baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.NumberUtils.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) * container.retina.reduceFactor;\n      var maxSize = Utils_1.NumberUtils.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n      var sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n      var moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;\n      var moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.NumberUtils.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\n      this.applyPath(delta);\n      var gravityOptions = particlesOptions.move.gravity;\n      var gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n\n      if (gravityOptions.enable) {\n        particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n      }\n\n      if (moveSpeed) {\n        particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n      }\n\n      particle.velocity.multTo(1 - particle.options.move.decay);\n      var velocity = particle.velocity.mult(moveSpeed);\n\n      if (gravityOptions.enable && Math.abs(velocity.y) >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n        velocity.y = gravityFactor * gravityOptions.maxSpeed;\n\n        if (moveSpeed) {\n          particle.velocity.y = velocity.y / moveSpeed;\n        }\n      }\n\n      particle.position.addTo(velocity);\n\n      if (particlesOptions.move.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n\n      var initialPosition = particle.initialPosition;\n      var initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n\n      if (particle.maxDistance) {\n        if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n          particle.misplaced = initialDistance > particle.maxDistance;\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        } else if (initialDistance < particle.maxDistance && particle.misplaced) {\n          particle.misplaced = false;\n        } else if (particle.misplaced) {\n          if (particle.position.x < initialPosition.x && particle.velocity.x < 0 || particle.position.x > initialPosition.x && particle.velocity.x > 0) {\n            particle.velocity.x *= -Math.random();\n          }\n\n          if (particle.position.y < initialPosition.y && particle.velocity.y < 0 || particle.position.y > initialPosition.y && particle.velocity.y > 0) {\n            particle.velocity.y *= -Math.random();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"applyPath\",\n    value: function applyPath(delta) {\n      var particle = this.particle;\n      var particlesOptions = particle.options;\n      var pathOptions = particlesOptions.move.path;\n      var pathEnabled = pathOptions.enable;\n\n      if (!pathEnabled) {\n        return;\n      }\n\n      var container = this.container;\n\n      if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n      }\n\n      var generator = container.pathGenerator;\n\n      if (pathOptions.generator) {\n        var customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n\n        if (customGenerator) {\n          generator = customGenerator;\n        }\n      }\n\n      var path = generator.generate(particle);\n      particle.velocity.addTo(path);\n\n      if (pathOptions.clamp) {\n        particle.velocity.x = Utils_1.NumberUtils.clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = Utils_1.NumberUtils.clamp(particle.velocity.y, -1, 1);\n      }\n\n      particle.lastPathTime -= particle.pathDelay;\n    }\n  }, {\n    key: \"moveParallax\",\n    value: function moveParallax() {\n      var container = this.container;\n      var options = container.actualOptions;\n\n      if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n\n      var particle = this.particle;\n      var parallaxForce = options.interactivity.events.onHover.parallax.force;\n      var mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      var canvasCenter = {\n        x: container.canvas.size.width / 2,\n        y: container.canvas.size.height / 2\n      };\n      var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n      var factor = particle.getRadius() / parallaxForce;\n      var tmp = {\n        x: (mousePos.x - canvasCenter.x) * factor,\n        y: (mousePos.y - canvasCenter.y) * factor\n      };\n      particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n  }, {\n    key: \"getProximitySpeedFactor\",\n    value: function getProximitySpeedFactor() {\n      var container = this.container;\n      var options = container.actualOptions;\n      var active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n      if (!active) {\n        return 1;\n      }\n\n      var mousePos = this.container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return 1;\n      }\n\n      var particlePos = this.particle.getPosition();\n      var dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n      var radius = container.retina.slowModeRadius;\n\n      if (dist > radius) {\n        return 1;\n      }\n\n      var proximityFactor = dist / radius || 0;\n      var slowFactor = options.interactivity.modes.slow.factor;\n      return proximityFactor / slowFactor;\n    }\n  }]);\n\n  return Mover;\n}();\n\nexports.Mover = Mover;","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/node_modules/tsparticles/dist/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","container","particle","delta","bubble","inRange","links","plugins","plugin","destroyed","particleUpdate","moveParticle","moveParallax","_a","_b","particlesOptions","options","move","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","NumberUtils","getRangeValue","speed","retina","pixelRatio","reduceFactor","maxSize","getRangeMax","size","sizeFactor","getRadius","factor","moveDrift","drift","applyPath","gravityOptions","gravity","gravityFactor","inverse","velocity","y","acceleration","x","multTo","decay","mult","Math","abs","maxSpeed","position","addTo","vibrate","sin","cos","initialPosition","initialDistance","getDistance","maxDistance","misplaced","random","pathOptions","path","pathEnabled","lastPathTime","pathDelay","generator","pathGenerator","customGenerator","Plugins","getPathGenerator","generate","clamp","actualOptions","Utils","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","canvas","width","height","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","radius","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nclass Mover {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    move(delta) {\n        const particle = this.particle;\n        particle.bubble.inRange = false;\n        particle.links = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (particle.destroyed) {\n                break;\n            }\n            if (plugin.particleUpdate) {\n                plugin.particleUpdate(particle, delta);\n            }\n        }\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(delta);\n        this.moveParallax();\n    }\n    moveParticle(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        if (!particlesOptions.move.enable) {\n            return;\n        }\n        const container = this.container;\n        const slowFactor = this.getProximitySpeedFactor();\n        const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.NumberUtils.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) *\n            container.retina.reduceFactor;\n        const maxSize = Utils_1.NumberUtils.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n        const moveSpeed = (baseSpeed / 2) * sizeFactor * slowFactor * delta.factor;\n        const moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.NumberUtils.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\n        this.applyPath(delta);\n        const gravityOptions = particlesOptions.move.gravity;\n        const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        particle.velocity.multTo(1 - particle.options.move.decay);\n        const velocity = particle.velocity.mult(moveSpeed);\n        if (gravityOptions.enable && Math.abs(velocity.y) >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n            velocity.y = gravityFactor * gravityOptions.maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        particle.position.addTo(velocity);\n        if (particlesOptions.move.vibrate) {\n            particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n            particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n        const initialPosition = particle.initialPosition;\n        const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n        if (particle.maxDistance) {\n            if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n                particle.misplaced = initialDistance > particle.maxDistance;\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n            }\n            else if (initialDistance < particle.maxDistance && particle.misplaced) {\n                particle.misplaced = false;\n            }\n            else if (particle.misplaced) {\n                if ((particle.position.x < initialPosition.x && particle.velocity.x < 0) ||\n                    (particle.position.x > initialPosition.x && particle.velocity.x > 0)) {\n                    particle.velocity.x *= -Math.random();\n                }\n                if ((particle.position.y < initialPosition.y && particle.velocity.y < 0) ||\n                    (particle.position.y > initialPosition.y && particle.velocity.y > 0)) {\n                    particle.velocity.y *= -Math.random();\n                }\n            }\n        }\n    }\n    applyPath(delta) {\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        const pathOptions = particlesOptions.move.path;\n        const pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastPathTime <= particle.pathDelay) {\n            particle.lastPathTime += delta.value;\n            return;\n        }\n        let generator = container.pathGenerator;\n        if (pathOptions.generator) {\n            const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n            if (customGenerator) {\n                generator = customGenerator;\n            }\n        }\n        const path = generator.generate(particle);\n        particle.velocity.addTo(path);\n        if (pathOptions.clamp) {\n            particle.velocity.x = Utils_1.NumberUtils.clamp(particle.velocity.x, -1, 1);\n            particle.velocity.y = Utils_1.NumberUtils.clamp(particle.velocity.y, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n    }\n    moveParallax() {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const particle = this.particle;\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor() {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = this.particle.getPosition();\n        const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}