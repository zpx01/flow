{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useEffect, useState } from 'react';\nimport { ChannelPreviewMessenger } from './ChannelPreviewMessenger';\nimport { useIsChannelMuted } from './hooks/useIsChannelMuted';\nimport { getDisplayImage, getDisplayTitle, getLatestMessagePreview } from './utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nexport var ChannelPreview = function (props) {\n  var channel = props.channel,\n      _a = props.Preview,\n      Preview = _a === void 0 ? ChannelPreviewMessenger : _a;\n\n  var _b = useChatContext(),\n      activeChannel = _b.channel,\n      client = _b.client,\n      setActiveChannel = _b.setActiveChannel;\n\n  var _c = useTranslationContext(),\n      t = _c.t,\n      userLanguage = _c.userLanguage;\n\n  var _d = useState(channel.state.messages[channel.state.messages.length - 1]),\n      lastMessage = _d[0],\n      setLastMessage = _d[1];\n\n  var _e = useState(0),\n      unread = _e[0],\n      setUnread = _e[1];\n\n  var isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid;\n  var muted = useIsChannelMuted(channel).muted;\n  useEffect(function () {\n    if (isActive || muted) {\n      setUnread(0);\n    } else {\n      setUnread(channel.countUnread());\n    }\n  }, [channel, isActive, muted]);\n  useEffect(function () {\n    var handleEvent = function (event) {\n      if (event.message) setLastMessage(event.message);\n\n      if (!isActive && !muted) {\n        setUnread(channel.countUnread());\n      } else {\n        setUnread(0);\n      }\n    };\n\n    channel.on('message.new', handleEvent);\n    channel.on('message.updated', handleEvent);\n    channel.on('message.deleted', handleEvent);\n    return function () {\n      channel.off('message.new', handleEvent);\n      channel.off('message.updated', handleEvent);\n      channel.off('message.deleted', handleEvent);\n    };\n  }, [channel, isActive, muted]);\n  if (!Preview) return null;\n  return React.createElement(Preview, __assign({}, props, {\n    active: isActive,\n    displayImage: getDisplayImage(channel, client.user),\n    displayTitle: getDisplayTitle(channel, client.user),\n    lastMessage: lastMessage,\n    latestMessage: getLatestMessagePreview(channel, t, userLanguage),\n    setActiveChannel: setActiveChannel,\n    unread: unread\n  }));\n};","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreview.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useEffect","useState","ChannelPreviewMessenger","useIsChannelMuted","getDisplayImage","getDisplayTitle","getLatestMessagePreview","useChatContext","useTranslationContext","ChannelPreview","props","channel","_a","Preview","_b","activeChannel","client","setActiveChannel","_c","userLanguage","_d","state","messages","lastMessage","setLastMessage","_e","unread","setUnread","isActive","cid","muted","countUnread","handleEvent","event","message","on","off","createElement","active","displayImage","user","displayTitle","latestMessage"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useEffect, useState } from 'react';\nimport { ChannelPreviewMessenger } from './ChannelPreviewMessenger';\nimport { useIsChannelMuted } from './hooks/useIsChannelMuted';\nimport { getDisplayImage, getDisplayTitle, getLatestMessagePreview } from './utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nexport var ChannelPreview = function (props) {\n    var channel = props.channel, _a = props.Preview, Preview = _a === void 0 ? ChannelPreviewMessenger : _a;\n    var _b = useChatContext(), activeChannel = _b.channel, client = _b.client, setActiveChannel = _b.setActiveChannel;\n    var _c = useTranslationContext(), t = _c.t, userLanguage = _c.userLanguage;\n    var _d = useState(channel.state.messages[channel.state.messages.length - 1]), lastMessage = _d[0], setLastMessage = _d[1];\n    var _e = useState(0), unread = _e[0], setUnread = _e[1];\n    var isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid;\n    var muted = useIsChannelMuted(channel).muted;\n    useEffect(function () {\n        if (isActive || muted) {\n            setUnread(0);\n        }\n        else {\n            setUnread(channel.countUnread());\n        }\n    }, [channel, isActive, muted]);\n    useEffect(function () {\n        var handleEvent = function (event) {\n            if (event.message)\n                setLastMessage(event.message);\n            if (!isActive && !muted) {\n                setUnread(channel.countUnread());\n            }\n            else {\n                setUnread(0);\n            }\n        };\n        channel.on('message.new', handleEvent);\n        channel.on('message.updated', handleEvent);\n        channel.on('message.deleted', handleEvent);\n        return function () {\n            channel.off('message.new', handleEvent);\n            channel.off('message.updated', handleEvent);\n            channel.off('message.deleted', handleEvent);\n        };\n    }, [channel, isActive, muted]);\n    if (!Preview)\n        return null;\n    return (React.createElement(Preview, __assign({}, props, { active: isActive, displayImage: getDisplayImage(channel, client.user), displayTitle: getDisplayTitle(channel, client.user), lastMessage: lastMessage, latestMessage: getLatestMessagePreview(channel, t, userLanguage), setActiveChannel: setActiveChannel, unread: unread })));\n};\n"]},"metadata":{},"sourceType":"module"}