{"ast":null,"code":"import React from 'react';\nimport { EmojiPicker } from './EmojiPicker';\nimport { CooldownTimer as DefaultCooldownTimer } from './hooks/useCooldownTimer';\nimport { EmojiIconLarge as DefaultEmojiIcon, SendButton as DefaultSendButton } from './icons';\nimport { ChatAutoComplete } from '../ChatAutoComplete/ChatAutoComplete';\nimport { Tooltip } from '../Tooltip/Tooltip';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\nimport { useComponentContext } from '../../context/ComponentContext';\n/**\n * @deprecated - This UI component will be removed in the next major release.\n */\n\nexport var MessageInputSimple = function () {\n  var t = useTranslationContext().t;\n\n  var _a = useMessageInputContext(),\n      closeEmojiPicker = _a.closeEmojiPicker,\n      cooldownInterval = _a.cooldownInterval,\n      cooldownRemaining = _a.cooldownRemaining,\n      emojiPickerIsOpen = _a.emojiPickerIsOpen,\n      handleEmojiKeyDown = _a.handleEmojiKeyDown,\n      handleSubmit = _a.handleSubmit,\n      openEmojiPicker = _a.openEmojiPicker,\n      setCooldownRemaining = _a.setCooldownRemaining;\n\n  var _b = useComponentContext(),\n      _c = _b.CooldownTimer,\n      CooldownTimer = _c === void 0 ? DefaultCooldownTimer : _c,\n      _d = _b.EmojiIcon,\n      EmojiIcon = _d === void 0 ? DefaultEmojiIcon : _d,\n      _e = _b.SendButton,\n      SendButton = _e === void 0 ? DefaultSendButton : _e;\n\n  return React.createElement(\"div\", {\n    className: \"str-chat__input-flat \" + (SendButton ? 'str-chat__input-flat--send-button-active' : null)\n  }, React.createElement(\"div\", {\n    className: 'str-chat__input-flat-wrapper'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__input-flat--textarea-wrapper'\n  }, React.createElement(ChatAutoComplete, null), React.createElement(\"div\", {\n    className: 'str-chat__emojiselect-wrapper'\n  }, React.createElement(Tooltip, null, emojiPickerIsOpen ? t('Close emoji picker') : t('Open emoji picker')), React.createElement(\"span\", {\n    className: 'str-chat__input-flat-emojiselect',\n    onClick: emojiPickerIsOpen ? closeEmojiPicker : openEmojiPicker,\n    onKeyDown: handleEmojiKeyDown,\n    role: 'button',\n    tabIndex: 0\n  }, cooldownRemaining ? React.createElement(\"div\", {\n    className: 'str-chat__input-flat-cooldown'\n  }, React.createElement(CooldownTimer, {\n    cooldownInterval: cooldownInterval,\n    setCooldownRemaining: setCooldownRemaining\n  })) : React.createElement(EmojiIcon, null))), React.createElement(EmojiPicker, null)), !cooldownRemaining && React.createElement(SendButton, {\n    sendMessage: handleSubmit\n  })));\n};","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/node_modules/stream-chat-react/dist/components/MessageInput/MessageInputSimple.js"],"names":["React","EmojiPicker","CooldownTimer","DefaultCooldownTimer","EmojiIconLarge","DefaultEmojiIcon","SendButton","DefaultSendButton","ChatAutoComplete","Tooltip","useTranslationContext","useMessageInputContext","useComponentContext","MessageInputSimple","t","_a","closeEmojiPicker","cooldownInterval","cooldownRemaining","emojiPickerIsOpen","handleEmojiKeyDown","handleSubmit","openEmojiPicker","setCooldownRemaining","_b","_c","_d","EmojiIcon","_e","createElement","className","onClick","onKeyDown","role","tabIndex","sendMessage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { EmojiPicker } from './EmojiPicker';\nimport { CooldownTimer as DefaultCooldownTimer } from './hooks/useCooldownTimer';\nimport { EmojiIconLarge as DefaultEmojiIcon, SendButton as DefaultSendButton } from './icons';\nimport { ChatAutoComplete } from '../ChatAutoComplete/ChatAutoComplete';\nimport { Tooltip } from '../Tooltip/Tooltip';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\nimport { useComponentContext } from '../../context/ComponentContext';\n/**\n * @deprecated - This UI component will be removed in the next major release.\n */\nexport var MessageInputSimple = function () {\n    var t = useTranslationContext().t;\n    var _a = useMessageInputContext(), closeEmojiPicker = _a.closeEmojiPicker, cooldownInterval = _a.cooldownInterval, cooldownRemaining = _a.cooldownRemaining, emojiPickerIsOpen = _a.emojiPickerIsOpen, handleEmojiKeyDown = _a.handleEmojiKeyDown, handleSubmit = _a.handleSubmit, openEmojiPicker = _a.openEmojiPicker, setCooldownRemaining = _a.setCooldownRemaining;\n    var _b = useComponentContext(), _c = _b.CooldownTimer, CooldownTimer = _c === void 0 ? DefaultCooldownTimer : _c, _d = _b.EmojiIcon, EmojiIcon = _d === void 0 ? DefaultEmojiIcon : _d, _e = _b.SendButton, SendButton = _e === void 0 ? DefaultSendButton : _e;\n    return (React.createElement(\"div\", { className: \"str-chat__input-flat \" + (SendButton ? 'str-chat__input-flat--send-button-active' : null) },\n        React.createElement(\"div\", { className: 'str-chat__input-flat-wrapper' },\n            React.createElement(\"div\", { className: 'str-chat__input-flat--textarea-wrapper' },\n                React.createElement(ChatAutoComplete, null),\n                React.createElement(\"div\", { className: 'str-chat__emojiselect-wrapper' },\n                    React.createElement(Tooltip, null, emojiPickerIsOpen ? t('Close emoji picker') : t('Open emoji picker')),\n                    React.createElement(\"span\", { className: 'str-chat__input-flat-emojiselect', onClick: emojiPickerIsOpen ? closeEmojiPicker : openEmojiPicker, onKeyDown: handleEmojiKeyDown, role: 'button', tabIndex: 0 }, cooldownRemaining ? (React.createElement(\"div\", { className: 'str-chat__input-flat-cooldown' },\n                        React.createElement(CooldownTimer, { cooldownInterval: cooldownInterval, setCooldownRemaining: setCooldownRemaining }))) : (React.createElement(EmojiIcon, null)))),\n                React.createElement(EmojiPicker, null)),\n            !cooldownRemaining && React.createElement(SendButton, { sendMessage: handleSubmit }))));\n};\n"]},"metadata":{},"sourceType":"module"}