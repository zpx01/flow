{"ast":null,"code":"import _slicedToArray from \"/Users/zeeshanpatel/flow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useCheckboxGroup } from \"./use-checkbox-group\";\n\nvar _createContext = createContext({\n  name: \"CheckboxGroupContext\",\n  strict: false\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    CheckboxGroupProvider = _createContext2[0],\n    useCheckboxGroupContext = _createContext2[1];\n\nexport { useCheckboxGroupContext };\n/**\n * Used for multiple checkboxes which are bound in one group,\n * and it indicates whether one or more options are selected.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\n\nexport var CheckboxGroup = function CheckboxGroup(props) {\n  var colorScheme = props.colorScheme,\n      size = props.size,\n      variant = props.variant,\n      children = props.children,\n      isDisabled = props.isDisabled;\n\n  var _useCheckboxGroup = useCheckboxGroup(props),\n      value = _useCheckboxGroup.value,\n      onChange = _useCheckboxGroup.onChange;\n\n  var group = React.useMemo(function () {\n    return {\n      size: size,\n      onChange: onChange,\n      colorScheme: colorScheme,\n      value: value,\n      variant: variant,\n      isDisabled: isDisabled\n    };\n  }, [size, onChange, colorScheme, value, variant, isDisabled]);\n  return /*#__PURE__*/React.createElement(CheckboxGroupProvider, {\n    value: group\n  }, children);\n};\n\nif (__DEV__) {\n  CheckboxGroup.displayName = \"CheckboxGroup\";\n}","map":{"version":3,"sources":["../../src/checkbox-group.tsx"],"names":["createContext","name","strict","CheckboxGroup","props","isDisabled","onChange","useCheckboxGroup","group","size","colorScheme","value","variant"],"mappings":";AACA,SAAA,OAAA,QAAA,kBAAA;AACA,SAAA,aAAA,QAAA,wBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,gBAAA,QAAA,sBAAA;;qBAmBIA,aAAa,CAAuB;AACtCC,EAAAA,IAAI,EADkC,sBAAA;AAEtCC,EAAAA,MAAM,EAAE;AAF8B,CAAvB,C;;IAHX,qB;IAAA,uB;;AAQN,SAAA,uBAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,aAA2C,GAAIC,SAA/CD,aAA+CC,CAAAA,KAAD,EAAW;AAAA,MAC9D,WAD8D,GACpE,KADoE,CAC9D,WAD8D;AAAA,MAC9D,IAD8D,GACpE,KADoE,CAC9D,IAD8D;AAAA,MAC9D,OAD8D,GACpE,KADoE,CAC9D,OAD8D;AAAA,MAC9D,QAD8D,GACpE,KADoE,CAC9D,QAD8D;AAAA,MACtBC,UADsB,GACpE,KADoE,CACtBA,UADsB;;AAAA,0BAExCE,gBAAgB,CAA5C,KAA4C,CAFwB;AAAA,MAE9D,KAF8D,qBAE9D,KAF8D;AAAA,MAErDD,QAFqD,qBAErDA,QAFqD;;AAIpE,MAAME,KAAK,GAAG,KAAK,CAAL,OAAA,CACZ;AAAA,WAAO;AACLC,MAAAA,IADK,EACLA,IADK;AAELH,MAAAA,QAFK,EAELA,QAFK;AAGLI,MAAAA,WAHK,EAGLA,WAHK;AAILC,MAAAA,KAJK,EAILA,KAJK;AAKLC,MAAAA,OALK,EAKLA,OALK;AAMLP,MAAAA,UAAAA,EAAAA;AANK,KAAP;AAAA,GADY,EASZ,CAAA,IAAA,EAAA,QAAA,EAAA,WAAA,EAAA,KAAA,EAAA,OAAA,EATF,UASE,CATY,CAAd;AAYA,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA;AAAuB,IAAA,KAAK,EAAEG;AAA9B,GAAA,EAAP,QAAO,CAAP;AAhBK,CAAA;;AAmBP,IAAA,OAAA,EAAa;AACXL,EAAAA,aAAa,CAAbA,WAAAA,GAAAA,eAAAA;AACD","sourcesContent":["import { ThemingProps } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport {\n  useCheckboxGroup,\n  UseCheckboxGroupProps,\n  UseCheckboxGroupReturn,\n} from \"./use-checkbox-group\"\n\nexport interface CheckboxGroupProps\n  extends UseCheckboxGroupProps,\n    Omit<ThemingProps<\"Checkbox\">, \"orientation\"> {\n  children?: React.ReactNode\n}\n\nexport interface CheckboxGroupContext\n  extends Pick<UseCheckboxGroupReturn, \"onChange\" | \"value\" | \"isDisabled\">,\n    Omit<ThemingProps<\"Checkbox\">, \"orientation\"> {}\n\nconst [\n  CheckboxGroupProvider,\n  useCheckboxGroupContext,\n] = createContext<CheckboxGroupContext>({\n  name: \"CheckboxGroupContext\",\n  strict: false,\n})\n\nexport { useCheckboxGroupContext }\n\n/**\n * Used for multiple checkboxes which are bound in one group,\n * and it indicates whether one or more options are selected.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\nexport const CheckboxGroup: React.FC<CheckboxGroupProps> = (props) => {\n  const { colorScheme, size, variant, children, isDisabled } = props\n  const { value, onChange } = useCheckboxGroup(props)\n\n  const group = React.useMemo(\n    () => ({\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n      isDisabled,\n    }),\n    [size, onChange, colorScheme, value, variant, isDisabled],\n  )\n\n  return <CheckboxGroupProvider value={group}>{children}</CheckboxGroupProvider>\n}\n\nif (__DEV__) {\n  CheckboxGroup.displayName = \"CheckboxGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}