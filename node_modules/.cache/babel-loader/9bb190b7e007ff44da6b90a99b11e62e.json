{"ast":null,"code":"import React from 'react';\nimport { ReactionIcon, ThreadIcon } from './icons';\nimport { MESSAGE_ACTIONS, showMessageActionsBox } from './utils';\nimport { MessageActions } from '../MessageActions';\nimport { useMessageContext } from '../../context/MessageContext';\n\nvar UnMemoizedMessageOptions = function (props) {\n  var _a = props.displayLeft,\n      displayLeft = _a === void 0 ? true : _a,\n      _b = props.displayReplies,\n      displayReplies = _b === void 0 ? true : _b,\n      propHandleOpenThread = props.handleOpenThread,\n      messageWrapperRef = props.messageWrapperRef,\n      _c = props.theme,\n      theme = _c === void 0 ? 'simple' : _c;\n\n  var _d = useMessageContext(),\n      getMessageActions = _d.getMessageActions,\n      contextHandleOpenThread = _d.handleOpenThread,\n      initialMessage = _d.initialMessage,\n      isMyMessage = _d.isMyMessage,\n      message = _d.message,\n      onReactionListClick = _d.onReactionListClick,\n      threadList = _d.threadList;\n\n  var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;\n  var messageActions = getMessageActions();\n  var showActionsBox = showMessageActionsBox(messageActions);\n  var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n  var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;\n\n  if (!message.type || message.type === 'error' || message.type === 'system' || message.type === 'ephemeral' || message.status === 'failed' || message.status === 'sending' || initialMessage) {\n    return null;\n  }\n\n  if (isMyMessage() && displayLeft) {\n    return React.createElement(\"div\", {\n      className: \"str-chat__message-\" + theme + \"__actions\",\n      \"data-testid\": 'message-options-left'\n    }, showActionsBox && React.createElement(MessageActions, {\n      messageWrapperRef: messageWrapperRef\n    }), shouldShowReplies && React.createElement(\"div\", {\n      className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--thread\",\n      \"data-testid\": 'thread-action',\n      onClick: handleOpenThread\n    }, React.createElement(ThreadIcon, null)), shouldShowReactions && React.createElement(\"div\", {\n      className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--reactions\",\n      \"data-testid\": 'message-reaction-action',\n      onClick: onReactionListClick\n    }, React.createElement(ReactionIcon, null)));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"str-chat__message-\" + theme + \"__actions\",\n    \"data-testid\": 'message-options'\n  }, shouldShowReactions && React.createElement(\"div\", {\n    className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--reactions\",\n    \"data-testid\": 'message-reaction-action',\n    onClick: onReactionListClick\n  }, React.createElement(ReactionIcon, null)), shouldShowReplies && React.createElement(\"div\", {\n    className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--thread\",\n    \"data-testid\": 'thread-action',\n    onClick: handleOpenThread\n  }, React.createElement(ThreadIcon, null)), showActionsBox && React.createElement(MessageActions, {\n    messageWrapperRef: messageWrapperRef\n  }));\n};\n\nexport var MessageOptions = React.memo(UnMemoizedMessageOptions);","map":{"version":3,"sources":["/Users/zeeshanpatel/flow/node_modules/stream-chat-react/dist/components/Message/MessageOptions.js"],"names":["React","ReactionIcon","ThreadIcon","MESSAGE_ACTIONS","showMessageActionsBox","MessageActions","useMessageContext","UnMemoizedMessageOptions","props","_a","displayLeft","_b","displayReplies","propHandleOpenThread","handleOpenThread","messageWrapperRef","_c","theme","_d","getMessageActions","contextHandleOpenThread","initialMessage","isMyMessage","message","onReactionListClick","threadList","messageActions","showActionsBox","shouldShowReactions","indexOf","react","shouldShowReplies","reply","type","status","createElement","className","onClick","MessageOptions","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ReactionIcon, ThreadIcon } from './icons';\nimport { MESSAGE_ACTIONS, showMessageActionsBox } from './utils';\nimport { MessageActions } from '../MessageActions';\nimport { useMessageContext } from '../../context/MessageContext';\nvar UnMemoizedMessageOptions = function (props) {\n    var _a = props.displayLeft, displayLeft = _a === void 0 ? true : _a, _b = props.displayReplies, displayReplies = _b === void 0 ? true : _b, propHandleOpenThread = props.handleOpenThread, messageWrapperRef = props.messageWrapperRef, _c = props.theme, theme = _c === void 0 ? 'simple' : _c;\n    var _d = useMessageContext(), getMessageActions = _d.getMessageActions, contextHandleOpenThread = _d.handleOpenThread, initialMessage = _d.initialMessage, isMyMessage = _d.isMyMessage, message = _d.message, onReactionListClick = _d.onReactionListClick, threadList = _d.threadList;\n    var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;\n    var messageActions = getMessageActions();\n    var showActionsBox = showMessageActionsBox(messageActions);\n    var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n    var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;\n    if (!message.type ||\n        message.type === 'error' ||\n        message.type === 'system' ||\n        message.type === 'ephemeral' ||\n        message.status === 'failed' ||\n        message.status === 'sending' ||\n        initialMessage) {\n        return null;\n    }\n    if (isMyMessage() && displayLeft) {\n        return (React.createElement(\"div\", { className: \"str-chat__message-\" + theme + \"__actions\", \"data-testid\": 'message-options-left' },\n            showActionsBox && React.createElement(MessageActions, { messageWrapperRef: messageWrapperRef }),\n            shouldShowReplies && (React.createElement(\"div\", { className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--thread\", \"data-testid\": 'thread-action', onClick: handleOpenThread },\n                React.createElement(ThreadIcon, null))),\n            shouldShowReactions && (React.createElement(\"div\", { className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--reactions\", \"data-testid\": 'message-reaction-action', onClick: onReactionListClick },\n                React.createElement(ReactionIcon, null)))));\n    }\n    return (React.createElement(\"div\", { className: \"str-chat__message-\" + theme + \"__actions\", \"data-testid\": 'message-options' },\n        shouldShowReactions && (React.createElement(\"div\", { className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--reactions\", \"data-testid\": 'message-reaction-action', onClick: onReactionListClick },\n            React.createElement(ReactionIcon, null))),\n        shouldShowReplies && (React.createElement(\"div\", { className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--thread\", \"data-testid\": 'thread-action', onClick: handleOpenThread },\n            React.createElement(ThreadIcon, null))),\n        showActionsBox && React.createElement(MessageActions, { messageWrapperRef: messageWrapperRef })));\n};\nexport var MessageOptions = React.memo(UnMemoizedMessageOptions);\n"]},"metadata":{},"sourceType":"module"}